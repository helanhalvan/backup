module Regions
import Agent_passive
import Collections.HashMap
import Global_funs
import SDL.SDL_Main
import Ped_util.UI
def regions(agents: [Agent],ui:bool) : void {
     let
         sdl_main = if ui then make_UI() else null : SDL_Main
         box = new Multi_box(agents)
     in
     {
        (new Reg_manager())!loop(box,ui,sdl_main,40000)
     }
 }
class Reg_manager {
    def loop(box:Multi_box,ui:bool,sdl_main:SDL_Main,i:int) : void {
        if(ui) then {
            show(get(box.agents()),sdl_main)
        };
        get(box.move());
        if i>0 then this!loop(box,ui,sdl_main,i-1) else print("done!\n")
    }
}
--multi threaded 2D space container
class Multi_box {
    --max x and y cords
    max : (int,int)
    --min x and y cords
    min : (int,int)
    --4 sub-boxes, together covering all the space in Multi_box
    {--
    -----------------
    |toplevel       |
    |    |tl|tr|    |
    |    -------    |
    |    |bl|br|    |
    |               |
    -----------------
    --}
    top_right : Box
    bottom_right : Box
    top_left : Box
    bottom_left : Box

    --TODO, adding a toplevel field where I can send agents that go out of bounds
    --currently I just create a massive box, and have agents in it never move
    toplevel : Box

    def init(agents:[Agent]) : void {
        let
            dx=0
            dy=0
        in {
        --find global xmax, xmin, and ymin, use to create boundries for the 2D space.
        --looks at both starting positions and waypoints
        match this.find_extreme(agents) with
            (xmax,ymax,xmin,ymin) => {this.max=(xmax,ymax);
                                      this.min=(xmin,ymin);
                                      dx=xmax-xmin;
                                      dy=ymax-ymin;
                                      --if(dx%2==0) then
                                        dx=dx/2;
                                      --else
                                        dy=dy/2;
                                      print("{} {} {}\n",this.max,this.min,(xmax-dx,ymax-dy));
                                      this.top_right=new Box(this.max,(xmax-dx+1,ymax-dy+1 ) );
                                      this.bottom_left=new Box( (xmax-dx,ymax-dy),this.min);
                                      this.top_left= new Box( (xmax-dx,ymax),(xmin,ymax-dy+1) );
                                      this.bottom_right=new Box( (xmax,ymax-dy),(xmax-dx+1,ymin) );
                                      this.toplevel=new Box( (100000,100000), (-100000,-100000) );
                                      print("tr {} {}\n",get(this.top_right.max()),get(this.top_right.min()) );
                                      print("bl {} {}\n",get(this.bottom_left.max()),get(this.bottom_left.min()) );
                                      print("tl {} {}\n",get(this.top_left.max()),get(this.top_left.min()) );
                                      print("br {} {}\n",get(this.bottom_right.max()),get(this.bottom_right.min()) );
                                      };
        --put each agent into exactly one box

        for a in agents {
            -- adding agents into boxes
            if( get(this.top_right.add(a))) then { () }
            else if( get(this.top_left.add(a))) then { () }
            else if( get(this.bottom_right.add(a))) then { () }
            else if( get(this.bottom_left.add(a))) then { () }
            else { print("{} didn't get in \n", a.pos);}
        };
        --LINK to toplevel
        this.top_right.default_link(this.toplevel);
        this.top_left.default_link(this.toplevel);
        this.bottom_right.default_link(this.toplevel);
        this.bottom_left.default_link(this.toplevel);

        let win=true;
        --LINKING BOXES, to allow them to pass agents between eachother
        win=win and get (this.top_right.link(this.top_left));
        win=win and get (this.top_right.link(this.bottom_right));
        win=win and get (this.top_left.link(this.top_right));
        win=win and get (this.top_left.link(this.bottom_left));
        win=win and get (this.bottom_left.link(this.bottom_right));
        win=win and get (this.bottom_left.link(this.top_left));
        win=win and get (this.bottom_right.link(this.top_right));
        win=win and get (this.bottom_right.link(this.bottom_left));

        print("WIN={}\n",win);
        }
    }
    --get corners of box
    def max() : (int,int) {this.max}
    def min() : (int,int) {this.min}
    def center() : (int,int) {get(this.bottom_left.max()) }
    --moves all internal agents on step, returns true if any agents tried to move
    def move () : bool {
        --debug check
        let
        a = this.top_right.move()
        b = this.top_left.move()
        c = this.bottom_right.move()
        d = this.bottom_left.move()
        in {
        get(a);
        get(b);
        get(c);
        get(d);
        -- SHORT CIRCUT DOES MAKE THIS RETURN BEFORE ALL DONE!
        (get(a)) or (get(b)) or (get(c)) or (get(d))
        }
    }
    def agents() : [(int,int)] { flatten([get(this.top_right.agents()),
                             get(this.top_left.agents()),
                             get(this.bottom_right.agents()),
                             get(this.bottom_left.agents())]) }
    def find_extreme(agents:[Agent]) : (int,int,int,int) {
        let extreme=(-10000,-10000,10000,10000);
        let i=0;
        for a in agents {
            --print("{}\n",i);
            i=i+1;
            extreme=this.extreme_check(a.pos(),extreme);
            for b in a.targets {
                extreme=this.extreme_check(b,extreme);
            }
        };
        extreme
    }
    def extreme_check(a:(int,int),b:(int,int,int,int) ) : (int,int,int,int) {
        match (a,b) with
            ((x,y),(xmax,ymax,xmin,ymin)) => (max(x,xmax),max(y,ymax),min(x,xmin),min(y,ymin))
    }
}
--single threaded 2D space container
--contains all Agents in a given 2D region of space
--assumess cordnate system where Y is height and X is with, so increasing X means further to the right
class Box {
-- min and max are inclusive
-- max is the greatest X value and the greatest Y value box contains
-- min is the smalles X and Y values
 max : (int,int)
 min : (int,int)
 up : Box
 down : Box
 left : Box
 right : Box
 agents : Agent_struct

def init(in_max:(int,int), in_min:(int,int) ) : void {
    this.agents=new Agent_struct();
    this.max=in_max;
    this.min=in_min;
    }
--getters for borders
def min() : (int,int) {this.min}
def max() : (int,int) {this.max}
def agents() : [(int,int)] {
    let
     b = new [(int,int)](this.agents.size())
     hashmap = this.agents.get_data()
     a = new HashMapIterator<Agent>(hashmap)
     i = 0
    in {
    while a.has_next() {
        b[i]=match a.next() with Just entry => entry.value.pos();
        i=i+1
    };
    if i < this.agents.size() then
        {
    let c = new [(int,int)](i);
    for index in [0..i] {
        c[index]=b[index];
    };
        c
    }
    else b
    }}

--returns true if a is inside the box, and stores it. Otherwise returns false
--TODO, check if legal, not needed currently
def add(a:Agent) : bool {
    match (a.pos(),this.max,this.min) with
        ((x,y),(xmax,ymax),(xmin,ymin)) when x>xmax or x<xmin or y>ymax or y<ymin => false
        _ => {this.agents.add(a); true}
}
--if the arguements shares a border with this box, it's added to the apropriate edge and returns true
--otherwise returns false
def link(a:Box) : bool {
    let c=a.max();
    let d=a.min();
    await(c);
    await(d);
    match (this.max,this.min,get(c),get(d) ) with
        ( (x_max_1,y_max_1),(x_min_1,y_min_1),(x_max_2,y_max_2),(x_min_2,y_min_2) ) when ((x_max_1+1) == x_min_2) => {this.right=a;print("right\n");true }
        ( (x_max_1,y_max_1),(x_min_1,y_min_1),(x_max_2,y_max_2),(x_min_2,y_min_2) ) when ((y_max_1+1) == y_min_2) => {this.up=a;   print("up\n"); true }
        ( (x_max_1,y_max_1),(x_min_1,y_min_1),(x_max_2,y_max_2),(x_min_2,y_min_2) ) when ((x_max_2+1) == x_min_1) => {this.left=a; print("left\n");true }
        ( (x_max_1,y_max_1),(x_min_1,y_min_1),(x_max_2,y_max_2),(x_min_2,y_min_2) ) when ((y_max_2+1) == y_min_1) => {this.down=a; print("down\n");true }
        _ => { false }
    }
def default_link(a:Box) : void {
        this.up=a;
        this.down=a;
        this.left=a;
        this.right=a;
    }
def alive(): bool { true }

 --moves all agents in the box once
 --returns true if there are some agents to move
 --otherwise false
def move(): bool {
   if (this.agents.size() == 0) then { false } else {
        let iterator = new HashMapIterator<Agent>(this.agents.get_data());
       while iterator.has_next() {
            let
                a = {match iterator.next() with Just entry => {entry.value}}
                desired = a.next()
                i = 0
                nejbor = null:Fut bool
                stillhere = true
            in {
            while( i < |desired| and stillhere == true) {
                --print(desired[i]);
                match (desired[i],this.max,this.min) with
                    --local collision
                    _ when this.agents.isin(desired[i])  => {i=i+1; embed void { continue; } end; ()}
                    --local move
                    ((x,y),(x_max,y_max),(x_min,y_min)) when (x<=x_max and x>=x_min and y<=y_max and y>=y_min) => { a.move((x,y));
                                                                                                                    embed void { break; } end
                                                                                                                  }
                    ((x,y),(x_max,y_max),(x_min,y_min)) when (x>x_max and (y<y_min or y>y_max) ) or (x<x_min and (y<y_min or y>y_max) ) => { print("this should never happen, agent way off"); 1/0; () }
                    --external move
                    ((x,y),(x_max,y_max),(x_min,y_min)) when (x>x_max) => { nejbor=this.right.external_move(a.copy(),(x,y) ); () }
                    ((x,y),(x_max,y_max),(x_min,y_min)) when (x<x_min) => { nejbor=this.left.external_move(a.copy(),(x,y) ); () }
                    ((x,y),(x_max,y_max),(x_min,y_min)) when (y>y_max) => { nejbor=this.up.external_move(a.copy(),(x,y) ); ()  }
                    ((x,y),(x_max,y_max),(x_min,y_min)) when (y<y_min) => { nejbor=this.down.external_move(a.copy(),(x,y) ); () };

                await(nejbor);
                if get(nejbor) then {
                    stillhere=false;
                    --print("ACCESS DENIED {} ##########################\n", a.i);
                    embed void { break; } end
                }
                else {
                    stillhere=true;
                    i=i+1
                };
                };
            if (stillhere == false) then {
                    this.agents.remove(a);
                }
            }};
          true
         }
      }

    --recives a Agent from another box
def external_move(a:Agent, pos:(int,int) ) : bool {
    if(this.agents.isin(pos)) then { false } else {
        a.move(pos);
        this.agents.add(a);
        true
        }
    }
}
