module Regions
import Agent_passive
import Global_funs
import SDL.SDL_Main
import Ped_util.UI

--TODO merege Reg_manager and Multi_box into a Box_manager
-- subdivides plane 4 times, genereting 4^4 regions, links them
-- replace hashmap linked list (faster iterator, never use lookup)
--TODO FIX COMPILER CRASH CAUSED BY THIS FILE
def regions(agents: [Agent],ui:bool) : void {
     var sdl_main = if ui then make_UI() else null : SDL_Main;
     var box = new Multi_box(agents);
     --print(|agents|);
    box!move(ui,sdl_main,40000); --40000
 }
--multi threaded 2D space container
class Multi_box {
    --max x and y cords
    max : (int,int)
    --min x and y cords
    min : (int,int)
    --4 sub-boxes, together covering all the space in Multi_box

    top_right : Box
    bottom_right : Box
    top_left : Box
    bottom_left : Box

    --TODO, adding a toplevel field where I can send agents that go out of bounds
    --currently I just create a massive box, and have agents in it never move
    --toplevel : Box

    def init(agents:[Agent]) : void {
        var dx=0;
        var dy=0;
        --find global xmax, xmin, and ymin, use to create boundries for the 2D space.
        --looks at both starting positions and waypoints
        match this.find_extreme(agents) with
            (xmax,ymax,xmin,ymin) => {this.max=(xmax,ymax);
                                      this.min=(xmin,ymin);
                                      dx=xmax-xmin;
                                      dy=ymax-ymin;
                                      --if(dx%2==0) then
                                        dx=dx/2;
                                      --else
                                        dy=dy/2;
                                      --print("{} {} {}\n",this.max,this.min,(xmax-dx,ymax-dy));
                                      this.top_right=new Box(this.max,(xmax-dx+1,ymax-dy+1 ) );
                                      this.bottom_left=new Box( (xmax-dx,ymax-dy),this.min);
                                      this.top_left= new Box( (xmax-dx,ymax),(xmin,ymax-dy+1) );
                                      this.bottom_right=new Box( (xmax,ymax-dy),(xmax-dx+1,ymin) );
                                      --this.toplevel=new Box(  );
                                      };
        --put each agent into exactly one box
        for a in agents {
            if( get(this.top_right.add(a))) then { () }
            else if( get(this.top_left.add(a))) then { () }
            else if( get(this.bottom_right.add(a))) then { () }
            else if( get(this.bottom_left.add(a))) then { () }
            else { print("{} didn't get in \n", a.pos());}
        };
        --LINK to toplevel
        {-
        get(this.top_right.default_link(this.toplevel));
        get(this.top_left.default_link(this.toplevel));
        get(this.bottom_right.default_link(this.toplevel));
        get(this.bottom_left.default_link(this.toplevel));
        -}
        var win=true;
        --LINKING BOXES, to allow them to pass agents between eachother
        win=win and get (this.top_right.link(this.top_left));
        win=win and get (this.top_right.link(this.bottom_right));
        win=win and get (this.top_left.link(this.top_right));
        win=win and get (this.top_left.link(this.bottom_left));
        win=win and get (this.bottom_left.link(this.bottom_right));
        win=win and get (this.bottom_left.link(this.top_left));
        win=win and get (this.bottom_right.link(this.top_right));
        win=win and get (this.bottom_right.link(this.bottom_left));
        --print("WIN={}\n",win);
    }
    --get corners of box
    def max() : (int,int) {this.max}
    def min() : (int,int) {this.min}
    def center() : (int,int) {get(this.bottom_left.max()) }
    --moves all internal agents on step, returns true if any agents tried to move
    def move (ui:bool,sdl_main:SDL_Main,i:int) : void {
        --debug check
        --print("multi_move\n");
        let
        a = this.top_right.move()
        b = this.top_left.move()
        c = this.bottom_right.move()
        d = this.bottom_left.move()
        in {
        --print("await\n");
        await(a);
        await(b);
        await(c);
        await(d);
        --print("done_wait\n");
        if(ui) then show(this.agents(),sdl_main);
        if(i>1) then this!move(ui,sdl_main,i-1);
        --print(|this.agents()|);
        }
    }
    def agents() : [(int,int)] {flatten([get(this.top_right.agents()),
                             get(this.top_left.agents()),
                             get(this.bottom_right.agents()),
                             get(this.bottom_left.agents())]) }
    def find_extreme(agents:[Agent]) : (int,int,int,int) {
        var extreme=(-10000,-10000,10000,10000);
        var i=0;
        for a in agents {
            --print("{}\n",i);
            i=i+1;
            extreme=this.extreme_check(a.pos(),extreme);
            for index in [0..|a.targets_x|-1] {
                extreme=this.extreme_check( (a.targets_x[index],a.targets_y[index]),extreme);
            }
        };
        extreme
    }
    def extreme_check(a:(int,int),b:(int,int,int,int) ) : (int,int,int,int) {
        match (a,b) with
            ((x,y),(xmax,ymax,xmin,ymin)) => (max(x,xmax),max(y,ymax),min(x,xmin),min(y,ymin))
    }
}

--single threaded 2D space container
--contains all Agents in a given 2D region of space
--assumess cordnate system where Y is height and X is with, so increasing X means further to the right
class Box {
-- min and max are inclusive
-- max is the greatest X value and the greatest Y value box contains
-- min is the smalles X and Y values
 xmax : int
 ymax : int
 xmin : int
 ymin : int
 up : Box
 down : Box
 left : Box
 right : Box
 matrix : C_Matrix
 agents : Item
 last : Item
 newcommers : Item
def init(in_max:(int,int), in_min:(int,int) ) : void {
    this.matrix= new C_Matrix(in_max,in_min);
    match in_max with (x,y) => {this.xmax=x;this.ymax=y};
    match in_min with (x,y) => {this.xmin=x;this.ymin=y};
    --print("done\n");
    }
--getters for borders
def min() : (int,int) { (this.xmin,this.ymin) }
def max() : (int,int) { (this.xmax,this.ymax) }
-- SLOW BUT ONLY USED BY UI
def agents() : [(int,int)] {
    this.merge();
    --print("merge done\n");

    if(this.agents==null) then {
        var j=0;
        for a in this.matrix.locks {if a==true then j=j+1;};
        --print((0,j));
        new [(int,int)](0); } else {
    --print("allocating agents\n");
    var cur= this.agents;
    var i=0;
    while cur!=null { i=i+1; cur=cur.next; };
    var j=0;
    for a in this.matrix.locks {if a==true then j=j+1;};
    --print((i,j));
    var ret= new [(int,int)](i);
    cur=this.agents;
    i=0;
    while cur!=null {
        ret[i]=cur.a.pos();
        --print(i);
        i=i+1;
        cur=cur.next
        };
    ret
    }}
 --adds new agents to newcommers linked list
def add(a:Agent) : bool {
    if a.x>this.xmax or a.x<this.xmin or a.y>this.ymax or a.y<this.ymin then false else {
        this.matrix.set(a.x,a.y,true); --add to collison matrix
    if(this.newcommers == null) then {this.newcommers=new Item(a); this.last=this.newcommers;} else {
        this.last.next=new Item(a);
        this.last=this.last.next;
    };
    true;
    }
}
--if the arguements shares a border with this box, it's added to the apropriate edge and returns true
--otherwise returns false
def link(a:Box) : bool {
    var c=a.max();
    var d=a.min();
    await(c);
    await(d);
    match (this.xmax,this.ymax,this.xmin,this.ymin,get(c),get(d)) with
        ( x_max_1,y_max_1,x_min_1,y_min_1,(x_max_2,y_max_2),(x_min_2,y_min_2) ) when ((x_max_1+1) == x_min_2) => {this.right=a;--print("right\n");
true }
        ( x_max_1,y_max_1,x_min_1,y_min_1,(x_max_2,y_max_2),(x_min_2,y_min_2) ) when ((y_max_1+1) == y_min_2) => {this.up=a;   --print("up\n");
true }
        ( x_max_1,y_max_1,x_min_1,y_min_1,(x_max_2,y_max_2),(x_min_2,y_min_2) ) when ((x_max_2+1) == x_min_1) => {this.left=a; --print("left\n");
true }
        ( x_max_1,y_max_1,x_min_1,y_min_1,(x_max_2,y_max_2),(x_min_2,y_min_2) ) when ((y_max_2+1) == y_min_1) => {this.down=a; --print("down\n");
true }
        _ => { false }
    }
def default_link(a:Box) : void {
        this.up=a;
        this.down=a;
        this.left=a;
        this.right=a;
    }
def merge() : void {
        if(this.newcommers!=null) then {
            --print((this.last.next,this.last.a,this.agents));
            this.last.next=this.agents; --append current agents to new agents list
            this.agents=this.newcommers; -- replace current agents with new agents list
            this.newcommers=null;
            --this.last=null;
        }
    }
 --moves all agents in the box once
 --returns true
def move() : bool {
        --print("serial_move\n");
        this.merge();
        var parent = this.agents;
        var a = this.agents;
       while a!=null {
            --print(this.agents);
                var desired = a.a.next();
                var i = 0;
                var nejbor = null:Fut bool;
                var moved = false;
            --print("+");
            while( i < |desired| and moved == false) {
                    match desired[i] with (x,y) => {
                        --print( ("go",desired[i],a.a.pos()) );
                        nejbor=null;
                        if x>this.xmax then nejbor=this.right.external_move(a.a,x,y);
                        if y>this.ymax then nejbor=this.up.external_move(a.a,x,y);
                        if x<this.xmin then nejbor=this.left.external_move(a.a,x,y);
                        if y<this.ymin then nejbor=this.down.external_move(a.a,x,y);
                        if nejbor==null then {
                            --local collision detection
                            if this.matrix.get_val(x,y)==false then {
                                this.matrix.set(a.a.x,a.a.y,false); --remove from old pos
                                this.matrix.set(x,y,true); --add to new pos
                                a.a.move_int(x,y); --move
                                moved=true;
                                --print("moved\n");
                            }
                        } else {
                            --print("border\n");
                            await(nejbor);
                            if get(nejbor) then { --if left this box
                                this.matrix.set(a.a.x,a.a.y,false); --remove from old pos
                                moved=true;
                                --remove a from list
                                if parent==a then {this.agents=a.next; parent=a.next;}--case for first item
                                             else parent.next=a.next; --other item
                            }
                        };
                            i=i+1;
                        }};
                if parent==a then a=a.next else {
                    parent=parent.next;
                    if parent!=null then a=parent.next else a=null}
            };
          --print("move done\n");
          true;
         }

    --recives a Agent from another box
def external_move(a:Agent, x:int,y:int ) : bool {
    --false;
    if(this.matrix.get_val(x,y)==true ) then { false } else {
        a.move_int(x,y);
        this.add(a);
        --print("ext_move\n");
        true;
        }
    }
}

--UTIL CLASSES FOR Box
    passive class Item {
        a : Agent
        next : Item
        def init(a:Agent) : void {this.a=a;}
    }
    passive class C_Matrix {
        origin_x : int
        origin_y : int
        locks : [bool]
        x_len : int
        def init(in_max:(int,int),in_min:(int,int)) : void {
                match (in_max,in_min) with
                    ((xmax,ymax),(xmin,ymin)) => {
                    this.origin_x=xmin;
                    this.origin_y=ymin;
                    this.x_len=xmax-xmin;
                    this.locks=new [bool]((xmax-xmin+1)*(ymax-ymin+1));
                    --print( (xmin,ymin,this.x_len,|this.locks|) );
                    for i in [0..|this.locks|] {(this.locks)[i]=false}
                };
            }
        def get_val( x:int,y:int ) : bool {
            --print((x,y,(x-this.origin_x)+((y-this.origin_y)*this.x_len)));
            (this.locks)[(x-this.origin_x)+((y-this.origin_y)*this.x_len)]
        }
        def set( x:int,y:int,value:bool ) : void {
            (this.locks)[(x-this.origin_x)+((y-this.origin_y)*this.x_len)]=value
        }
    }
--}
