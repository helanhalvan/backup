-- This file was automatically converted by encorec

module Regions
import Agent_passive
import Global_funs
import Quad_tree
fun regions(agents : [Agent], ui : bool, boxes : int) : unit
  var box = new Tiling_box(agents, boxes)
  println(("Encore regions", |agents|))
  box!move(10000, clock(), ui)
end
fun link(a : Box, b : Box) : bool
  val aa = a!link(b)
  val bb = b!link(a)
  val aaa = get(aa)
  val bbb = get(bb)
  unless aaa == bbb then
    print("ONE_WAY_LINK\n")
  end
  aaa
end
class Tiling_box
  var boxes : [Box]
  var futures : [Fut[bool]]
  var futs_left : int
  def init(agents : [Agent], n : int) : unit
    match find_extreme(agents) with
      case (xmax, ymax, xmin, ymin) =>
        val dx = xmax - xmin / n
        val dy = ymax - ymin / n
        this.boxes = new [Box](n * n)
        this.futures = new [Fut[bool]](|this.boxes|)
        var x = xmin
        var y = ymin
        var i = 0
        var win = true
        for xindex <- [0..n - 1] do
          for yindex <- [0..n - 2] do
            (this.boxes)(i) = new Box((x + dx - 1, y + dy - 1), (x, y))
            if yindex != 0 then
              win = win && link((this.boxes)(i), (this.boxes)(i - 1))
            end
            if xindex != 0 then
              win = win && link((this.boxes)(i), (this.boxes)(i - n))
            end
            if xindex != 0 && yindex != 0 then
              win = win && link((this.boxes)(i), (this.boxes)(i - n + 1))
              win = win && link((this.boxes)(i), (this.boxes)(i - n - 1))
              ()
            end
            i = i + 1
            y = y + dy
          end
          (this.boxes)(i) = new Box((x + dx - 1, ymax), (x, y))
          if xindex != 0 then
            win = win && link((this.boxes)(i), (this.boxes)(i - n))
            win = win && link((this.boxes)(i), (this.boxes)(i - n - 1))
          end
          win = win && link((this.boxes)(i), (this.boxes)(i - 1))
          i = i + 1
          x = x + dx
          y = ymin
        end
        for yindex <- [0..n - 2] do
          (this.boxes)(i) = new Box((xmax, y + dy - 1), (x, y))
          if yindex != 0 then
            win = win && link((this.boxes)(i), (this.boxes)(i - 1))
            win = win && link((this.boxes)(i), (this.boxes)(i - n - 1))
          end
          win = win && link((this.boxes)(i), (this.boxes)(i - n + 1))
          win = win && link((this.boxes)(i), (this.boxes)(i - n))
          i = i + 1
          y = y + dy
        end
        (this.boxes)(i) = new Box((xmax, ymax), (x, y))
        win = win && link((this.boxes)(i), (this.boxes)(i - n))
        win = win && link((this.boxes)(i), (this.boxes)(i - 1))
        win = win && link((this.boxes)(i), (this.boxes)(i - n - 1))
        unless win then
          print("WIN IS BAD!\n")
        end
        for a <- agents do
          for b <- this.boxes do
            if get(b!add(a)) then
                break
            end
          end
        end
      end

    end
  end
  def move(i : int, start_time : int, ui : bool) : unit
    for id <- [0..|this.boxes| - 1] do
      (this.futures)(id) = ((this.boxes)(id)) ! move()
    end
    for f <- this.futures do
      get(f)
    end
    if i > 1 then
      this!move(i - 1, start_time, ui)
    else
      printtime(clock() - start_time)
    end
  end
  def agents() : [(int, int)]
    val temp = new [[(int, int)]](|this.boxes|)
    for i <- [0..|this.boxes| - 1] do
      temp(i) = get(((this.boxes)(i)) ! agents())
    end
    flatten(temp)
  end
end
class Box
  var xmax : int
  var ymax : int
  var xmin : int
  var ymin : int
  var up : Maybe[Box]
  var down : Maybe[Box]
  var left : Maybe[Box]
  var right : Maybe[Box]
  var top_right : Maybe[Box]
  var top_left : Maybe[Box]
  var bottom_left : Maybe[Box]
  var bottom_right : Maybe[Box]
  var matrix : Quad_tree
  var agents : Maybe[Item]
  var last : Maybe[Item]
  var newcommers : Maybe[Item]
  var ttl : int
  var size : int
  var moving : bool
  def init(in_max : (int, int), in_min : (int, int)) : unit
    this.agents=Nothing
    this.last=Nothing
    this.newcommers=Nothing
    this.up=Nothing
    this.down=Nothing
    this.left=Nothing
    this.right=Nothing
    this.top_left=Nothing
    this.top_right=Nothing
    this.bottom_right=Nothing
    this.bottom_left=Nothing
    this.matrix = new Quad_tree(in_max, in_min)
    match in_max with
      case (x, y) =>
        this.xmax = x
        this.ymax = y
      end

    end
    match in_min with
      case (x, y) =>
        this.xmin = x
        this.ymin = y
      end

    end
    this.ttl = 10001
    this.size = 0
    this.moving = false
  end
  def min() : (int, int)
    (this.xmin, this.ymin)
  end
  def max() : (int, int)
    (this.xmax, this.ymax)
  end
{--
  def check_newcommers() : unit
    var cur = this.newcommers
    var i = 1
    print("Is newcommers related to last? ")
    while cur != this.last do
      if cur.a == null then
        print("GHOST IN THE CHAIN\n")
        while true do
          ()
        end
      end
      cur = cur.next
      i = i + 1
    end
    print(" Yes {}\n", i)
  end
  def check_channeling() : unit
    var cur = this.agents
    var i = 0
    while cur != null do
      i = i + 1
      cur = cur.next
    end
    var j = this.matrix.size()
    if i > j then
      print("more linked list agents ")
    end
    if i < j then
      print("more matrix agents ")
    end
    if i != j then
      println((i, j, this.size))
      cur = this.agents
      i = 0
      while cur != null do
        if this.matrix.get_val(cur.a.x, cur.a.y) == false then
          print("AGENT'S pos not in MATRIX {} {} {}\n", cur.a.hash_code, i, (this.xmax, this.ymax))
        end
        i = i + 1
        cur = cur.next
      end
      while true do
        ()
      end
    end
  end
--}
  def agents() : [(int, int)]
    this.merge()
    match this.agents with
        case Nothing => new [(int, int)](0)
        case thing =>
              var cur=thing
              var i = 0
              while cur != Nothing do
                i = i + 1
                match cur with
                    case Just(thing) => cur=thing.next
                end
              end
              var ret = new [(int, int)](i)
              cur = this.agents
              i = 0
              while cur != Nothing do
                i = i + 1
                match cur with
                    case Just(thing) =>
                     cur=thing.next
                     ret(i) = thing.a.pos()
                    end
                end
              end
              ret
        end
    end
  end
  def add(a : Agent) : bool
    if a.x > this.xmax || a.x < this.xmin || a.y > this.ymax || a.y < this.ymin then
      false
    else
      this.add_internal(a)
    end
  end
  def external_move(a : Agent, x : int, y : int) : bool
    if x > this.xmax || x < this.xmin || y > this.ymax || y < this.ymin then
      false
    else
      if this.matrix.get_val(x, y) == true then
        false
      else
        a.move_int(x, y)
        this.add_internal(a)
      end
    end
  end
  def add_internal(a : Agent) : bool
    if this.matrix.get_val(a.x, a.y) == true then
      print("AGENTS IN TOP OF eachother\n")
      while true do
        ()
      end
      true
    else
      this.matrix.set(a.x, a.y)
      if this.newcommers == Nothing then
        this.newcommers = Just(new Item(a))
      else
        if this.last == Nothing then
          this.last = Just(new Item(a))
          match this.newcommers with
              case Just(thing) => thing.append(this.last)
          end
        else
          var new_wraper = Just(new Item(a))
          match this.last with
            case Just(thing) => thing.append(new_wraper)
          end
          this.last = new_wraper
        end
      end
      this.size = this.size + 1
      true
    end
  end
  def link(a : Box) : bool
    var c = a ! max()
    var d = a ! min()
    await(c)
    await(d)
    match (this.xmax, this.ymax, this.xmin, this.ymin, get(c), get(d)) with
      case (x_max_1, y_max_1, x_min_1, y_min_1, (x_max_2, y_max_2), (x_min_2, y_min_2)) =>
        var top = y_max_1 + 1 == y_min_2
        var bottom = y_min_1 - 1 == y_max_2
        var right = x_max_1 + 1 == x_min_2
        var left = x_min_1 - 1 == x_max_2
        if not(left || right || top || bottom) then
          false
        else
          if top then
            if right then
                this.top_right = Just(a)
            else
              if left then
                  this.top_left = Just(a)
              else
                  this.up = Just(a)
              end
            end
          else
            if bottom then
              if right then
                  this.bottom_right = Just(a)
              else
                if left then
                    this.bottom_left = Just(a)
                else
                    this.down = Just(a)
                end
              end
            else
              if right then
                  this.right = Just(a)
              else
                  this.left = Just(a)
              end
            end
          end
          true
        end
      end

    end
  end
  def merge() : unit
    if this.newcommers != Nothing then
      if this.agents != Nothing then
        match (this.newcommers,this.last) with
            case (nobody_cares,Just(last)) => last.append(this.agents)
            case (Just(newc),unused) => newc.append(this.agents)
        end
        this.agents = this.newcommers
      else
        this.agents = this.newcommers
      end
      this.newcommers = Nothing
      this.last = Nothing
    end
  end
  def move() : bool
    this.ttl = this.ttl - 1
    this.merge()
    var parent = this.agents
    var wrapped_a = this.agents
    var desired = new [int](6)
    while wrapped_a != Nothing do
      var a = match wrapped_a with
                case Just(value) => value
              end
      if a.a.ttl == this.ttl then
        a.a.ttl = a.a.ttl - 1
        a.a.next(desired)
        var i = 0
        var moved = false
        var x2 = 0
        var y2 = 0
        while i < |desired| && moved == false do
          val x = desired(i)
          val y = desired(i + 1)
          let
            up = y > this.ymax
            down = y < this.ymin
            right = x > this.xmax
            left = x < this.xmin
            border = if up then
                       if right then
                         this.top_right
                       else
                         if left then
                           this.top_left
                         else
                           this.up
                         end
                       end
                     else
                       if down then
                         if right then
                           this.bottom_right
                         else
                           if left then
                             this.bottom_left
                           else
                             this.down
                           end
                         end
                       else
                         if left then
                           this.left
                         else
                           if right then
                             this.right
                           else
                             Nothing
                           end
                         end
                       end
                     end
          in
              match border with
                case Nothing =>
                  if this.matrix.get_val(x, y) == false then
                    unless this.matrix.remove(a.a.x, a.a.y) then
                      print("remove failed\n")
                      while true do
                        ()
                      end
                    end
                    this.matrix.set(x, y)
                    a.a.move_int(x, y)
                    moved = true
                  end
                end
                case Just(real_thing) =>
                    x2 = a.a.x
                    y2 = a.a.y
                    var nejbor = real_thing ! external_move(a.a, x, y)
                    await(nejbor)
                    if get(nejbor) then
                      this.size = this.size - 1
                      this.matrix.remove(x2, y2)
                      moved = true
                      if wrapped_a == this.agents then
                         this.agents = a.next
                      end
                      a.delete()
                    end
                end
              end
              i = i + 2
          end
        end
      end
      wrapped_a = a.next
    end
    this.moving = false
    true
  end
end
passive class Item : Id
  var a : Agent
  var next : Maybe[Item]
  var prev : Maybe[Item]
  def init(a : Agent) : unit
    this.a = a
    this.next=Nothing
    this.prev=Nothing
  end
  def delete() : unit
    match (this.next,this.prev) with
        case (Nothing,Nothing) => ()
        case (Just(next),Just(prev)) =>
            prev.next=this.next
            next.prev=this.prev
        end
        case (Nothing,Just(prev)) => prev.next=Nothing
        case (Just(next),Nothing) => next.prev=Nothing
    end
    this.a = null -- this passed typ checking???
  end
  def append(next : Maybe[Item]) : unit
    this.next = next
    match next with
      case Nothing => ()
      case Just(thing) => thing.next=Just(this)
    end
  end
end
