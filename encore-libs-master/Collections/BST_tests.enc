import BST

def int_compare(x : int, y : int) : int {
    if x < y then
        -1
    else if x == y then
        0
    else
        1
}

def bst_test_add() : bool {
    let bst = new BSTree<int, int>() in {
        bst.add(1, 12, int_compare) and
        bst.add(2, 23, int_compare)
    }
}

def bst_test_add_adv() : bool {
    let
        bst = new BSTree<int, int>()
        foo1 = bst.add(5, 5, int_compare)
        foo2 = bst.add(3, 3, int_compare)
        foo3 = bst.add(7, 7, int_compare)
        foo4 = bst.add(4, 4, int_compare)
        foo5 = bst.add(6, 6, int_compare)
        foo6 = bst.add(8, 8, int_compare)
        foo7 = bst.add(2, 2, int_compare)
    in {
        {-
            Test to ensure that the tree has
            the following structure:

                      5
                   /     \
                  3       7
                 / \     / \
                2   4   6   8
        -}

        match bst.root with
            Just root when root.key == 5 => {
                (match root.left with
                    Just l when l.value == 3 => {
                        (match l.left with
                            Just ll when ll.value == 2 => true
                            _ => false
                        ) and
                        (match l.right with
                            Just lr when lr.value == 4 => true
                            _ => false
                        )
                    }
                    _ => false
                ) and
                (match root.right with
                    Just r when r.value == 7 => {
                        (match r.left with
                            Just rl when rl.value == 6 => true
                            _ => false
                        ) and
                        (match r.right with
                            Just rr when rr.value == 8 => true
                            _ => false
                        )
                    }
                    _ => false
                )
            }
            _ => false
    }
}
