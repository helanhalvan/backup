bundle XML.XML where
import FileIO.IO
passive class XML_node {
    s_rep : String
    children : [XML_node]
    comments : [String]
    name : String
    atribs : [(String,String)]
    def init() : void { () }
    def children_named(name:String) : [XML_node] {
        let cn = new [XML_node](|this.children|);
        let i=0;
        --print("loop go {}\n",|this.children|);
        for a in this.children {
            --print("looping\n");
            --print("{} \n", a);
            if(a.name.contains(name)) then {
            --print("{}\n",a.s_rep);
            cn[i]=a;
            i=i+1;
            }
        };
        let cn2= new [XML_node](i);
        i=0;
        for a in cn2 {
            cn2[i]=cn[i];
            i=i+1
        };
        cn2
    }
    def attribute_value(name:String) : String {
        let ret = "";
        for a in this.atribs {
            match a with 
                (key,value) when key.contains(name) => { ret=value; () } 
                _ => ()
        };
        --print(ret);
        ret
    }
}

passive class XML_lib {
    def init() : void { () }

    def new_XML_node(s:String) : Maybe XML_node {
    let node = new XML_node();
    let bad = false;
    s.trim();
    node.s_rep=s;
    let cont = new [String](s.occurrences("<"));

    if(|cont|==1) then {
        let r= match (s.char_at(0),s.char_at( s.size()-2),s.char_at(s.size()-1)) with
                -- <self-closing-tag /> 
                (Just '<', Just '/', Just '>') => { node.name=s; this.ext_atribs(node,node.name); Just node } 
                _ => Nothing;
        embed void return #{r}; end
    };

    let start = s.find("<");
    let finnish = 0;

    for i in [0..|cont|-1] {
        finnish=s.find_from(">",start);
        cont[i]={match s.substring(start,finnish+1) with Just sub => sub Nothing => ""};
        
        --print("${}$\n",cont[i]);
        start=s.find_from("<",finnish)
        };
    node.name=cont[0];
    this.ext_atribs(node,node.name);
    if( this.pair(node.name, cont[|cont|-1])) then {

    node.comments = new [String]( |cont| );
    let ci = 0;
    let babies = new [String](|cont|);
    let j=0;
    let temp = "";
    let level=0;
    for i in [1..|cont|-2] { 
        --print("TEMP:{}\n",temp);
        match (level,this.tag_type(cont[i])) with
                (0,'c') => { node.comments[ci]=cont[i]; ci=ci+1; () }
                (0,'t') => { babies[j]=cont[i]; j=j+1; () }
                (1,'e') => { babies[j]=temp.concatenate(cont[i]); temp=""; j=j+1; level=0; () }
                (X,'e') => { temp=temp.concatenate(cont[i]); level=X-1; () }
                (X,'s') => { temp=temp.concatenate(cont[i]); level=X+1; ()}
                _ => {temp=temp.concatenate(cont[i]); () }        
    };
    node.children=new [XML_node](j);
    for i in [0..j-1] {
        --print("$$ {} \n\n",babies[i]);
        match this.new_XML_node(babies[i]) with 
                Just xml => { node.children[i]=xml; () }
                Nothing => { bad=true; () }
       };
       
       if(bad==false) then {
            Just node 
       }
       else
            Nothing
       } else { Nothing }
    }

    def tag_type( s:String ) : char {
         match s.char_at(1) with
            --print("COMMENT\n"); 
                Just '!' => { 'c' }
            --print("END-TAG\n"); 
                Just '/' => { 'e' }
                _ => { 
                        match s.char_at( s.size()-2) with 
                                Just '/' => { --print("Self-Closing\n"); 
't' 
}
                                _ => { --print("START-TAG\n"); 
's' 
}
                     }
    }
    def ext_atribs(node:XML_node,s:String) : void {
        node.atribs= new [(String,String)](s.occurrences("="));
        let eqsign=0;
        let space=0;
        let value="";
        let key="";
        --print("\n{}\n",s);
        for i in [0..|node.atribs|-1] {
            space=s.find_from(" ",eqsign); --last space before next eqsign, TODO make work for all cases
            eqsign=s.find_from("=",eqsign+1);
            value=match s.substring(eqsign+2,this.or_find_from(" ", ">",eqsign,s)-1) with 
                            Just derp => derp
                            Nothing => "MISSFORMEDVALUE";
            key=match s.substring(space,eqsign) with 
                            Just derp => derp
                            Nothing => "MISSFORMEDKEY";
            node.atribs[i]=(key,value);
            --print("{}",(key,value));
        }
    }
    def or_find_from(a:String,b:String,i:int,s:String) : int {
        let w = s.find_from(a,i);
        let q = s.find_from(b,i);
        --print("{} < {}\n", w, q);
        if(w<q and w>(-1) ) then { w } else { q }
    }
    def pair(head:String, tail:String) : bool { 
        --TODO <x></x> => true else => false
        true
    }

    def file_to_xml(fname : String) : Maybe XML_node {
       let f = new File("","");
       let s = "";
       f.open(fname,"r");

       while(f.eof()!=true){
            s=s.concatenate(f.readline());
       };
--       print("${}$\n",s);

       this.new_XML_node(s)
    }
}

