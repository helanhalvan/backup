 *** Error during typechecking *** 
"./encore-libs-master/Ped_util/Regions.enc" (line 34, column 40)
Operator 'and' is only defined for boolean types
   Left type: bool
   Right type: Fut bool
In expression: 
  win and (this.boxes[i]).link(this.boxes[i - 1])
In expression: 
  win = win and (this.boxes[i]).link(this.boxes[i - 1])
In expression: 
  {win = win and (this.boxes[i]).link(this.boxes[i - 1]);
   win = win and (this.boxes[i - 1]).link(this.boxes[i])}
In expression: 
  if yindex != 0 then
    {win = win and (this.boxes[i]).link(this.boxes[i - 1]);
     win = win and (this.boxes[i - 1]).link(this.boxes[i])}
In expression: 
  {print("new\n");
   this.boxes[i] = new Box((x + dx - 1, y + dy - 1), (x, y));
   if yindex != 0 then
     {win = win and (this.boxes[i]).link(this.boxes[i - 1]);
      win = win and (this.boxes[i - 1]).link(this.boxes[i])};
   if xindex != 0 then
     {win = win and (this.boxes[i]).link(this.boxes[i - n]);
      win = win and (this.boxes[i - n]).link(this.boxes[i])};
   i = i + 1;
   y = y + dy}
In expression: 
  for yindex in [ 0 , n - 2 by 1 ]
    {print("new\n");
     this.boxes[i] = new Box((x + dx - 1, y + dy - 1), (x, y));
     if yindex != 0 then
       {win = win and (this.boxes[i]).link(this.boxes[i - 1]);
        win = win and (this.boxes[i - 1]).link(this.boxes[i])};
     if xindex != 0 then
       {win = win and (this.boxes[i]).link(this.boxes[i - n]);
        win = win and (this.boxes[i - n]).link(this.boxes[i])};
     i = i + 1;
     y = y + dy}
In expression: 
  {for yindex in [ 0 , n - 2 by 1 ]
     {print("new\n");
      this.boxes[i] = new Box((x + dx - 1, y + dy - 1), (x, y));
      if yindex != 0 then
        {win = win and (this.boxes[i]).link(this.boxes[i - 1]);
         win = win and (this.boxes[i - 1]).link(this.boxes[i])};
      if xindex != 0 then
        {win = win and (this.boxes[i]).link(this.boxes[i - n]);
         win = win and (this.boxes[i - n]).link(this.boxes[i])};
      i = i + 1;
      y = y + dy};
   if xindex != n - 1 then
     {println(ymax - y);
      print("big\n");
      this.boxes[i] = new Box((x + dx - 1, ymax), (x, y));
      if xindex != 0 then
        {win = win and (this.boxes[i]).link(this.boxes[i - n]);
         win = win and (this.boxes[i - n]).link(this.boxes[i]);
         win = win and (this.boxes[i]).link(this.boxes[i - 1]);
         win = win and (this.boxes[i - 1]).link(this.boxes[i])};
      i = i + 1;
      x = x + dx}
   else
     {print("last\n");
      this.boxes[i] = new Box((xmax, ymax), (x, y));
      win = win and (this.boxes[i]).link(this.boxes[i - n]);
      win = win and (this.boxes[i - n]).link(this.boxes[i]);
      win = win and (this.boxes[i]).link(this.boxes[i - 1]);
      win = win and (this.boxes[i - 1]).link(this.boxes[i])};
   y = ymin}
In expression: 
  for xindex in [ 0 , n - 1 by 1 ]
    {for yindex in [ 0 , n - 2 by 1 ]
       {print("new\n");
        this.boxes[i] = new Box((x + dx - 1, y + dy - 1), (x, y));
        if yindex != 0 then
          {win = win and (this.boxes[i]).link(this.boxes[i - 1]);
           win = win and (this.boxes[i - 1]).link(this.boxes[i])};
        if xindex != 0 then
          {win = win and (this.boxes[i]).link(this.boxes[i - n]);
           win = win and (this.boxes[i - n]).link(this.boxes[i])};
        i = i + 1;
        y = y + dy};
     if xindex != n - 1 then
       {println(ymax - y);
        print("big\n");
        this.boxes[i] = new Box((x + dx - 1, ymax), (x, y));
        if xindex != 0 then
          {win = win and (this.boxes[i]).link(this.boxes[i - n]);
           win = win and (this.boxes[i - n]).link(this.boxes[i]);
           win = win and (this.boxes[i]).link(this.boxes[i - 1]);
           win = win and (this.boxes[i - 1]).link(this.boxes[i])};
        i = i + 1;
        x = x + dx}
     else
       {print("last\n");
        this.boxes[i] = new Box((xmax, ymax), (x, y));
        win = win and (this.boxes[i]).link(this.boxes[i - n]);
        win = win and (this.boxes[i - n]).link(this.boxes[i]);
        win = win and (this.boxes[i]).link(this.boxes[i - 1]);
        win = win and (this.boxes[i - 1]).link(this.boxes[i])};
     y = ymin}
In expression: 
  let win = true
In expression: 
  let win = true
In expression: 
  let i = 0
In expression: 
  let i = 0
In expression: 
  let y = ymin
In expression: 
  let y = ymin
In expression: 
  let x = xmin
In expression: 
  let x = xmin
In expression: 
  let dy = ymax - ymin / n
In expression: 
  let dy = ymax - ymin / n
In expression: 
  let dx = xmax - xmin / n
In expression: 
  let dx = xmax - xmin / n
In expression: 
  {let dx = xmax - xmin / n;
   let dy = ymax - ymin / n;
   this.boxes = new [Box](n * n);
   let x = xmin;
   let y = ymin;
   let i = 0;
   let win = true;
   for xindex in [ 0 , n - 1 by 1 ]
     {for yindex in [ 0 , n - 2 by 1 ]
        {print("new\n");
         this.boxes[i] = new Box((x + dx - 1, y + dy - 1), (x, y));
         if yindex != 0 then
           {win = win and (this.boxes[i]).link(this.boxes[i - 1]);
            win = win and (this.boxes[i - 1]).link(this.boxes[i])};
         if xindex != 0 then
           {win = win and (this.boxes[i]).link(this.boxes[i - n]);
            win = win and (this.boxes[i - n]).link(this.boxes[i])};
         i = i + 1;
         y = y + dy};
      if xindex != n - 1 then
        {println(ymax - y);
         print("big\n");
         this.boxes[i] = new Box((x + dx - 1, ymax), (x, y));
         if xindex != 0 then
           {win = win and (this.boxes[i]).link(this.boxes[i - n]);
            win = win and (this.boxes[i - n]).link(this.boxes[i]);
            win = win and (this.boxes[i]).link(this.boxes[i - 1]);
            win = win and (this.boxes[i - 1]).link(this.boxes[i])};
         i = i + 1;
         x = x + dx}
      else
        {print("last\n");
         this.boxes[i] = new Box((xmax, ymax), (x, y));
         win = win and (this.boxes[i]).link(this.boxes[i - n]);
         win = win and (this.boxes[i - n]).link(this.boxes[i]);
         win = win and (this.boxes[i]).link(this.boxes[i - 1]);
         win = win and (this.boxes[i - 1]).link(this.boxes[i])};
      y = ymin}}
In expression: 
  match find_extreme(agents) with
    (xmax, ymax, xmin, ymin) => {let dx = xmax - xmin / n;
                                 let dy = ymax - ymin / n;
                                 this.boxes = new [Box](n * n);
                                 let x = xmin;
                                 let y = ymin;
                                 let i = 0;
                                 let win = true;
                                 for xindex in [ 0 , n - 1 by 1 ]
                                   {for yindex in [ 0 , n - 2 by 1 ]
                                      {print("new\n");
                                       this.boxes[i] = new Box((x + dx - 1, y + dy - 1), (x, y));
                                       if yindex != 0 then
                                         {win = win and (this.boxes[i]).link(this.boxes[i - 1]);
                                          win = win and (this.boxes[i - 1]).link(this.boxes[i])};
                                       if xindex != 0 then
                                         {win = win and (this.boxes[i]).link(this.boxes[i - n]);
                                          win = win and (this.boxes[i - n]).link(this.boxes[i])};
                                       i = i + 1;
                                       y = y + dy};
                                    if xindex != n - 1 then
                                      {println(ymax - y);
                                       print("big\n");
                                       this.boxes[i] = new Box((x + dx - 1, ymax), (x, y));
                                       if xindex != 0 then
                                         {win = win and (this.boxes[i]).link(this.boxes[i - n]);
                                          win = win and (this.boxes[i - n]).link(this.boxes[i]);
                                          win = win and (this.boxes[i]).link(this.boxes[i - 1]);
                                          win = win and (this.boxes[i - 1]).link(this.boxes[i])};
                                       i = i + 1;
                                       x = x + dx}
                                    else
                                      {print("last\n");
                                       this.boxes[i] = new Box((xmax, ymax), (x, y));
                                       win = win and (this.boxes[i]).link(this.boxes[i - n]);
                                       win = win and (this.boxes[i - n]).link(this.boxes[i]);
                                       win = win and (this.boxes[i]).link(this.boxes[i - 1]);
                                       win = win and (this.boxes[i - 1]).link(this.boxes[i])};
                                    y = ymin}}
  
In expression: 
  match find_extreme(agents) with
    (xmax, ymax, xmin, ymin) => {let dx = xmax - xmin / n;
                                 let dy = ymax - ymin / n;
                                 this.boxes = new [Box](n * n);
                                 let x = xmin;
                                 let y = ymin;
                                 let i = 0;
                                 let win = true;
                                 for xindex in [ 0 , n - 1 by 1 ]
                                   {for yindex in [ 0 , n - 2 by 1 ]
                                      {print("new\n");
                                       this.boxes[i] = new Box((x + dx - 1, y + dy - 1), (x, y));
                                       if yindex != 0 then
                                         {win = win and (this.boxes[i]).link(this.boxes[i - 1]);
                                          win = win and (this.boxes[i - 1]).link(this.boxes[i])};
                                       if xindex != 0 then
                                         {win = win and (this.boxes[i]).link(this.boxes[i - n]);
                                          win = win and (this.boxes[i - n]).link(this.boxes[i])};
                                       i = i + 1;
                                       y = y + dy};
                                    if xindex != n - 1 then
                                      {println(ymax - y);
                                       print("big\n");
                                       this.boxes[i] = new Box((x + dx - 1, ymax), (x, y));
                                       if xindex != 0 then
                                         {win = win and (this.boxes[i]).link(this.boxes[i - n]);
                                          win = win and (this.boxes[i - n]).link(this.boxes[i]);
                                          win = win and (this.boxes[i]).link(this.boxes[i - 1]);
                                          win = win and (this.boxes[i - 1]).link(this.boxes[i])};
                                       i = i + 1;
                                       x = x + dx}
                                    else
                                      {print("last\n");
                                       this.boxes[i] = new Box((xmax, ymax), (x, y));
                                       win = win and (this.boxes[i]).link(this.boxes[i - n]);
                                       win = win and (this.boxes[i - n]).link(this.boxes[i]);
                                       win = win and (this.boxes[i]).link(this.boxes[i - 1]);
                                       win = win and (this.boxes[i - 1]).link(this.boxes[i])};
                                    y = ymin}}
  
In method '_init' of type 'void'
In class 'Regions.Tiling_box'

