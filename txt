 *** Error during typechecking *** 
"./encore-libs-master/Ped_util/Regions.enc" (line 290, column 34)
Type 'Regions.Box' does not match expected type 'Maybe[Regions.Box]'
In expression: 
  a
In expression: 
  this.top_right = a
In expression: 
  do
    this.top_right = a
    true
  end
In expression: 
  if right then
    this.top_right = a
    true
  else
    if left then
      this.top_left = a
    else
      this.up = a
    end
  end
In expression: 
  if top then
    if right then
      this.top_right = a
      true
    else
      if left then
        this.top_left = a
      else
        this.up = a
      end
    end
  else
    if bottom then
      if right then
        if this.bottom_right == Nothing then
          this.bottom_right = a
          true
        else
          false
        end
      else
        if left then
          this.bottom_left = a
        else
          this.down = a
        end
      end
    else
      if right then
        this.right = a
      else
        this.left = a
      end
    end
  end
In expression: 
  if not(left || right || top || bottom) then
    false
  else
    if top then
      if right then
        this.top_right = a
        true
      else
        if left then
          this.top_left = a
        else
          this.up = a
        end
      end
    else
      if bottom then
        if right then
          if this.bottom_right == Nothing then
            this.bottom_right = a
            true
          else
            false
          end
        else
          if left then
            this.bottom_left = a
          else
            this.down = a
          end
        end
      else
        if right then
          this.right = a
        else
          this.left = a
        end
      end
    end
  end
In expression: 
  var left = x_min_1 - 1 == x_max_2
In expression: 
  var left = x_min_1 - 1 == x_max_2
In expression: 
  var right = x_max_1 + 1 == x_min_2
In expression: 
  var right = x_max_1 + 1 == x_min_2
In expression: 
  var bottom = y_min_1 - 1 == y_max_2
In expression: 
  var bottom = y_min_1 - 1 == y_max_2
In expression: 
  var top = y_max_1 + 1 == y_min_2
In expression: 
  var top = y_max_1 + 1 == y_min_2
In expression: 
  do
    var top = y_max_1 + 1 == y_min_2
    var bottom = y_min_1 - 1 == y_max_2
    var right = x_max_1 + 1 == x_min_2
    var left = x_min_1 - 1 == x_max_2
    if not(left || right || top || bottom) then
      false
    else
      if top then
        if right then
          this.top_right = a
          true
        else
          if left then
            this.top_left = a
          else
            this.up = a
          end
        end
      else
        if bottom then
          if right then
            if this.bottom_right == Nothing then
              this.bottom_right = a
              true
            else
              false
            end
          else
            if left then
              this.bottom_left = a
            else
              this.down = a
            end
          end
        else
          if right then
            this.right = a
          else
            this.left = a
          end
        end
      end
    end
  end
In expression: 
  match (this.xmax, this.ymax, this.xmin, this.ymin, get(c), get(d)) with
    case (x_max_1, y_max_1, x_min_1, y_min_1, (x_max_2, y_max_2), (x_min_2, y_min_2)) =>
      var top = y_max_1 + 1 == y_min_2
      var bottom = y_min_1 - 1 == y_max_2
      var right = x_max_1 + 1 == x_min_2
      var left = x_min_1 - 1 == x_max_2
      if not(left || right || top || bottom) then
        false
      else
        if top then
          if right then
            this.top_right = a
            true
          else
            if left then
              this.top_left = a
            else
              this.up = a
            end
          end
        else
          if bottom then
            if right then
              if this.bottom_right == Nothing then
                this.bottom_right = a
                true
              else
                false
              end
            else
              if left then
                this.bottom_left = a
              else
                this.down = a
              end
            end
          else
            if right then
              this.right = a
            else
              this.left = a
            end
          end
        end
      end
    end
  
  end
In expression: 
  var d = a!min()
In expression: 
  var d = a!min()
In expression: 
  var c = a!max()
In expression: 
  var c = a!max()
In expression: 
  do
    var c = a!max()
    var d = a!min()
    await(c)
    await(d)
    match (this.xmax, this.ymax, this.xmin, this.ymin, get(c), get(d)) with
      case (x_max_1, y_max_1, x_min_1, y_min_1, (x_max_2, y_max_2), (x_min_2, y_min_2)) =>
        var top = y_max_1 + 1 == y_min_2
        var bottom = y_min_1 - 1 == y_max_2
        var right = x_max_1 + 1 == x_min_2
        var left = x_min_1 - 1 == x_max_2
        if not(left || right || top || bottom) then
          false
        else
          if top then
            if right then
              this.top_right = a
              true
            else
              if left then
                this.top_left = a
              else
                this.up = a
              end
            end
          else
            if bottom then
              if right then
                if this.bottom_right == Nothing then
                  this.bottom_right = a
                  true
                else
                  false
                end
              else
                if left then
                  this.bottom_left = a
                else
                  this.down = a
                end
              end
            else
              if right then
                this.right = a
              else
                this.left = a
              end
            end
          end
        end
      end
    
    end
  end
In method 'link' of type 'bool'
In class 'Regions.Box'

