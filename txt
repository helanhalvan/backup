 *** Error during typechecking *** 
"./encore-libs-master/Ped_util/Regions.enc" (line 237, column 18)
No field 'tll' in class 'Agent'
In expression: 
  a.a.tll
In expression: 
  a.a.tll == this.ttl
In expression: 
  if a.a.tll == this.ttl then
    {var desired = a.a.next();
     var i = 0;
     var nejbor = null : Fut bool;
     var moved = false;
     var x2 = 0;
     var y2 = 0;
     while i < |desired| and moved == false
       match desired[i] with
         (x, y) => {nejbor = null;
                    let up = y > this.ymax
                        down = y < this.ymin
                        right = x > this.xmax
                        left = x < this.xmin
                        border = if up then
                                   if right then
                                     this.top_right
                                   else
                                     if left then
                                       this.top_left
                                     else
                                       this.up
                                 else
                                   if down then
                                     if right then
                                       this.bottom_right
                                     else
                                       if left then
                                         this.bottom_left
                                       else
                                         this.down
                                   else
                                     if left then
                                       this.left
                                     else
                                       if right then
                                         this.right
                                       else
                                         null : Box
                    in
                      {if up or down or left or right then
                         if border == null then
                           {print("collision with edge of simulation, {}\n", (x, y));
                            nejbor = mk_Future(false)}
                         else
                           {x2 = a.a.x;
                            y2 = a.a.y;
                            nejbor = border.external_move(a.a, x, y)};
                       if nejbor == null then
                         if this.matrix.get_val(x, y) == false then
                           {unless this.matrix.remove(a.a.x, a.a.y) then
                              print("remove failed\n");
                            this.matrix.set(x, y, true);
                            a.a.move_int(x, y);
                            moved = true}
                       else
                         {await nejbor;
                          if get nejbor then
                            {unless this.matrix.remove(x2, y2) then
                               print("remove failed 2\n");
                             moved = true;
                             if parent == a then
                               {this.agents = a.next;
                                parent = a.next}
                             else
                               parent.next = a.next}};
                       i = i + 1}}
       }
In expression: 
  {if a.a.tll == this.ttl then
     {var desired = a.a.next();
      var i = 0;
      var nejbor = null : Fut bool;
      var moved = false;
      var x2 = 0;
      var y2 = 0;
      while i < |desired| and moved == false
        match desired[i] with
          (x, y) => {nejbor = null;
                     let up = y > this.ymax
                         down = y < this.ymin
                         right = x > this.xmax
                         left = x < this.xmin
                         border = if up then
                                    if right then
                                      this.top_right
                                    else
                                      if left then
                                        this.top_left
                                      else
                                        this.up
                                  else
                                    if down then
                                      if right then
                                        this.bottom_right
                                      else
                                        if left then
                                          this.bottom_left
                                        else
                                          this.down
                                    else
                                      if left then
                                        this.left
                                      else
                                        if right then
                                          this.right
                                        else
                                          null : Box
                     in
                       {if up or down or left or right then
                          if border == null then
                            {print("collision with edge of simulation, {}\n", (x, y));
                             nejbor = mk_Future(false)}
                          else
                            {x2 = a.a.x;
                             y2 = a.a.y;
                             nejbor = border.external_move(a.a, x, y)};
                        if nejbor == null then
                          if this.matrix.get_val(x, y) == false then
                            {unless this.matrix.remove(a.a.x, a.a.y) then
                               print("remove failed\n");
                             this.matrix.set(x, y, true);
                             a.a.move_int(x, y);
                             moved = true}
                        else
                          {await nejbor;
                           if get nejbor then
                             {unless this.matrix.remove(x2, y2) then
                                print("remove failed 2\n");
                              moved = true;
                              if parent == a then
                                {this.agents = a.next;
                                 parent = a.next}
                              else
                                parent.next = a.next}};
                        i = i + 1}}
        };
   if parent == null then
     a = null
   else
     if parent == a then
       a = a.next
     else
       {parent = parent.next;
        if parent != null then
          a = parent.next
        else
          a = null}}
In expression: 
  while a != null
    {if a.a.tll == this.ttl then
       {var desired = a.a.next();
        var i = 0;
        var nejbor = null : Fut bool;
        var moved = false;
        var x2 = 0;
        var y2 = 0;
        while i < |desired| and moved == false
          match desired[i] with
            (x, y) => {nejbor = null;
                       let up = y > this.ymax
                           down = y < this.ymin
                           right = x > this.xmax
                           left = x < this.xmin
                           border = if up then
                                      if right then
                                        this.top_right
                                      else
                                        if left then
                                          this.top_left
                                        else
                                          this.up
                                    else
                                      if down then
                                        if right then
                                          this.bottom_right
                                        else
                                          if left then
                                            this.bottom_left
                                          else
                                            this.down
                                      else
                                        if left then
                                          this.left
                                        else
                                          if right then
                                            this.right
                                          else
                                            null : Box
                       in
                         {if up or down or left or right then
                            if border == null then
                              {print("collision with edge of simulation, {}\n", (x, y));
                               nejbor = mk_Future(false)}
                            else
                              {x2 = a.a.x;
                               y2 = a.a.y;
                               nejbor = border.external_move(a.a, x, y)};
                          if nejbor == null then
                            if this.matrix.get_val(x, y) == false then
                              {unless this.matrix.remove(a.a.x, a.a.y) then
                                 print("remove failed\n");
                               this.matrix.set(x, y, true);
                               a.a.move_int(x, y);
                               moved = true}
                          else
                            {await nejbor;
                             if get nejbor then
                               {unless this.matrix.remove(x2, y2) then
                                  print("remove failed 2\n");
                                moved = true;
                                if parent == a then
                                  {this.agents = a.next;
                                   parent = a.next}
                                else
                                  parent.next = a.next}};
                          i = i + 1}}
          };
     if parent == null then
       a = null
     else
       if parent == a then
         a = a.next
       else
         {parent = parent.next;
          if parent != null then
            a = parent.next
          else
            a = null}}
In expression: 
  var a = this.agents
In expression: 
  var a = this.agents
In expression: 
  var parent = this.agents
In expression: 
  var parent = this.agents
In expression: 
  {this.merge();
   var parent = this.agents;
   var a = this.agents;
   while a != null
     {if a.a.tll == this.ttl then
        {var desired = a.a.next();
         var i = 0;
         var nejbor = null : Fut bool;
         var moved = false;
         var x2 = 0;
         var y2 = 0;
         while i < |desired| and moved == false
           match desired[i] with
             (x, y) => {nejbor = null;
                        let up = y > this.ymax
                            down = y < this.ymin
                            right = x > this.xmax
                            left = x < this.xmin
                            border = if up then
                                       if right then
                                         this.top_right
                                       else
                                         if left then
                                           this.top_left
                                         else
                                           this.up
                                     else
                                       if down then
                                         if right then
                                           this.bottom_right
                                         else
                                           if left then
                                             this.bottom_left
                                           else
                                             this.down
                                       else
                                         if left then
                                           this.left
                                         else
                                           if right then
                                             this.right
                                           else
                                             null : Box
                        in
                          {if up or down or left or right then
                             if border == null then
                               {print("collision with edge of simulation, {}\n", (x, y));
                                nejbor = mk_Future(false)}
                             else
                               {x2 = a.a.x;
                                y2 = a.a.y;
                                nejbor = border.external_move(a.a, x, y)};
                           if nejbor == null then
                             if this.matrix.get_val(x, y) == false then
                               {unless this.matrix.remove(a.a.x, a.a.y) then
                                  print("remove failed\n");
                                this.matrix.set(x, y, true);
                                a.a.move_int(x, y);
                                moved = true}
                           else
                             {await nejbor;
                              if get nejbor then
                                {unless this.matrix.remove(x2, y2) then
                                   print("remove failed 2\n");
                                 moved = true;
                                 if parent == a then
                                   {this.agents = a.next;
                                    parent = a.next}
                                 else
                                   parent.next = a.next}};
                           i = i + 1}}
           };
      if parent == null then
        a = null
      else
        if parent == a then
          a = a.next
        else
          {parent = parent.next;
           if parent != null then
             a = parent.next
           else
             a = null}};
   true}
In method 'move' of type 'bool'
In class 'Regions.Box'

