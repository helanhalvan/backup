Warning at "./encore-libs-master/Collections/Linked_List.enc" (line 88, column 43):
Comparing polymorphic values is unstable. 
Later versions of Encore will require type constraints for this to work
 *** Error during typechecking *** 
"main.enc" (line 415, column 22)
Type '[Agent]' does not match expected type 'Agent'
In expression: 
  this.agents.add([a])
In expression: 
  {this.agents.add([a]);
   i = i + 1}
In expression: 
  if get nejbor then
    embed void { break; } end
  else
    {this.agents.add([a]);
     i = i + 1}
In expression: 
  {match (desired[i], this.max, this.min) with
     _ when this.agents.isin(desired[i]) => {i = i + 1;
                                             embed void { continue; } end;
                                             ()}
     ((x, y), 
      (x_max, y_max), 
      (x_min, 
       y_min)) when x <= x_max and x >= x_min and y <= y_max and y >= y_min => {a.move((x, 
                                                                                        y));
                                                                                this.agents.add(a);
                                                                                embed void { break; } end}
     ((x, y), 
      (x_max, y_max), 
      (x_min, 
       y_min)) when x > x_max and y < y_min or y > y_max or x < x_min and y < y_min or y > y_max => {print("this should never happen, agent way off");
                                                                                                     1 / 0;
                                                                                                     ()}
     ((x, y), 
      (x_max, y_max), 
      (x_min, 
       y_min)) when x > x_max => {nejbor = this.right.external_move(a.copy(), 
                                                                    (x, y));
                                  ()}
     ((x, y), 
      (x_max, y_max), 
      (x_min, 
       y_min)) when x < x_min => {nejbor = this.left.external_move(a.copy(), 
                                                                   (x, y));
                                  ()}
     ((x, y), 
      (x_max, y_max), 
      (x_min, 
       y_min)) when y > y_max => {nejbor = this.up.external_move(a.copy(), 
                                                                 (x, y));
                                  ()}
     ((x, y), 
      (x_max, y_max), 
      (x_min, 
       y_min)) when y < y_min => {nejbor = this.down.external_move(a.copy(), 
                                                                   (x, y));
                                  ()}
   ;
   await nejbor;
   if get nejbor then
     embed void { break; } end
   else
     {this.agents.add([a]);
      i = i + 1}}
In expression: 
  while i < |desired|
    {match (desired[i], this.max, this.min) with
       _ when this.agents.isin(desired[i]) => {i = i + 1;
                                               embed void { continue; } end;
                                               ()}
       ((x, y), 
        (x_max, y_max), 
        (x_min, 
         y_min)) when x <= x_max and x >= x_min and y <= y_max and y >= y_min => {a.move((x, 
                                                                                          y));
                                                                                  this.agents.add(a);
                                                                                  embed void { break; } end}
       ((x, y), 
        (x_max, y_max), 
        (x_min, 
         y_min)) when x > x_max and y < y_min or y > y_max or x < x_min and y < y_min or y > y_max => {print("this should never happen, agent way off");
                                                                                                       1 / 0;
                                                                                                       ()}
       ((x, y), 
        (x_max, y_max), 
        (x_min, 
         y_min)) when x > x_max => {nejbor = this.right.external_move(a.copy(), 
                                                                      (x, y));
                                    ()}
       ((x, y), 
        (x_max, y_max), 
        (x_min, 
         y_min)) when x < x_min => {nejbor = this.left.external_move(a.copy(), 
                                                                     (x, y));
                                    ()}
       ((x, y), 
        (x_max, y_max), 
        (x_min, 
         y_min)) when y > y_max => {nejbor = this.up.external_move(a.copy(), 
                                                                   (x, y));
                                    ()}
       ((x, y), 
        (x_max, y_max), 
        (x_min, 
         y_min)) when y < y_min => {nejbor = this.down.external_move(a.copy(), 
                                                                     (x, y));
                                    ()}
     ;
     await nejbor;
     if get nejbor then
       embed void { break; } end
     else
       {this.agents.add([a]);
        i = i + 1}}
In expression: 
  while i < |desired|
    {match (desired[i], this.max, this.min) with
       _ when this.agents.isin(desired[i]) => {i = i + 1;
                                               embed void { continue; } end;
                                               ()}
       ((x, y), 
        (x_max, y_max), 
        (x_min, 
         y_min)) when x <= x_max and x >= x_min and y <= y_max and y >= y_min => {a.move((x, 
                                                                                          y));
                                                                                  this.agents.add(a);
                                                                                  embed void { break; } end}
       ((x, y), 
        (x_max, y_max), 
        (x_min, 
         y_min)) when x > x_max and y < y_min or y > y_max or x < x_min and y < y_min or y > y_max => {print("this should never happen, agent way off");
                                                                                                       1 / 0;
                                                                                                       ()}
       ((x, y), 
        (x_max, y_max), 
        (x_min, 
         y_min)) when x > x_max => {nejbor = this.right.external_move(a.copy(), 
                                                                      (x, y));
                                    ()}
       ((x, y), 
        (x_max, y_max), 
        (x_min, 
         y_min)) when x < x_min => {nejbor = this.left.external_move(a.copy(), 
                                                                     (x, y));
                                    ()}
       ((x, y), 
        (x_max, y_max), 
        (x_min, 
         y_min)) when y > y_max => {nejbor = this.up.external_move(a.copy(), 
                                                                   (x, y));
                                    ()}
       ((x, y), 
        (x_max, y_max), 
        (x_min, 
         y_min)) when y < y_min => {nejbor = this.down.external_move(a.copy(), 
                                                                     (x, y));
                                    ()}
     ;
     await nejbor;
     if get nejbor then
       embed void { break; } end
     else
       {this.agents.add([a]);
        i = i + 1}}
In expression: 
  let a = match iterator.next() with
            Just entry => entry.value
          
      desired = a.next()
      i = 0
      nejbor = null : Fut bool
  in
    while i < |desired|
      {match (desired[i], this.max, this.min) with
         _ when this.agents.isin(desired[i]) => {i = i + 1;
                                                 embed void { continue; } end;
                                                 ()}
         ((x, y), 
          (x_max, y_max), 
          (x_min, 
           y_min)) when x <= x_max and x >= x_min and y <= y_max and y >= y_min => {a.move((x, 
                                                                                            y));
                                                                                    this.agents.add(a);
                                                                                    embed void { break; } end}
         ((x, y), 
          (x_max, y_max), 
          (x_min, 
           y_min)) when x > x_max and y < y_min or y > y_max or x < x_min and y < y_min or y > y_max => {print("this should never happen, agent way off");
                                                                                                         1 / 0;
                                                                                                         ()}
         ((x, y), 
          (x_max, y_max), 
          (x_min, 
           y_min)) when x > x_max => {nejbor = this.right.external_move(a.copy(), 
                                                                        (x, y));
                                      ()}
         ((x, y), 
          (x_max, y_max), 
          (x_min, 
           y_min)) when x < x_min => {nejbor = this.left.external_move(a.copy(), 
                                                                       (x, y));
                                      ()}
         ((x, y), 
          (x_max, y_max), 
          (x_min, 
           y_min)) when y > y_max => {nejbor = this.up.external_move(a.copy(), 
                                                                     (x, y));
                                      ()}
         ((x, y), 
          (x_max, y_max), 
          (x_min, 
           y_min)) when y < y_min => {nejbor = this.down.external_move(a.copy(), 
                                                                       (x, y));
                                      ()}
       ;
       await nejbor;
       if get nejbor then
         embed void { break; } end
       else
         {this.agents.add([a]);
          i = i + 1}}
In expression: 
  let a = match iterator.next() with
            Just entry => entry.value
          
      desired = a.next()
      i = 0
      nejbor = null : Fut bool
  in
    while i < |desired|
      {match (desired[i], this.max, this.min) with
         _ when this.agents.isin(desired[i]) => {i = i + 1;
                                                 embed void { continue; } end;
                                                 ()}
         ((x, y), 
          (x_max, y_max), 
          (x_min, 
           y_min)) when x <= x_max and x >= x_min and y <= y_max and y >= y_min => {a.move((x, 
                                                                                            y));
                                                                                    this.agents.add(a);
                                                                                    embed void { break; } end}
         ((x, y), 
          (x_max, y_max), 
          (x_min, 
           y_min)) when x > x_max and y < y_min or y > y_max or x < x_min and y < y_min or y > y_max => {print("this should never happen, agent way off");
                                                                                                         1 / 0;
                                                                                                         ()}
         ((x, y), 
          (x_max, y_max), 
          (x_min, 
           y_min)) when x > x_max => {nejbor = this.right.external_move(a.copy(), 
                                                                        (x, y));
                                      ()}
         ((x, y), 
          (x_max, y_max), 
          (x_min, 
           y_min)) when x < x_min => {nejbor = this.left.external_move(a.copy(), 
                                                                       (x, y));
                                      ()}
         ((x, y), 
          (x_max, y_max), 
          (x_min, 
           y_min)) when y > y_max => {nejbor = this.up.external_move(a.copy(), 
                                                                     (x, y));
                                      ()}
         ((x, y), 
          (x_max, y_max), 
          (x_min, 
           y_min)) when y < y_min => {nejbor = this.down.external_move(a.copy(), 
                                                                       (x, y));
                                      ()}
       ;
       await nejbor;
       if get nejbor then
         embed void { break; } end
       else
         {this.agents.add([a]);
          i = i + 1}}
In expression: 
  while iterator.has_next()
    let a = match iterator.next() with
              Just entry => entry.value
            
        desired = a.next()
        i = 0
        nejbor = null : Fut bool
    in
      while i < |desired|
        {match (desired[i], this.max, this.min) with
           _ when this.agents.isin(desired[i]) => {i = i + 1;
                                                   embed void { continue; } end;
                                                   ()}
           ((x, y), 
            (x_max, y_max), 
            (x_min, 
             y_min)) when x <= x_max and x >= x_min and y <= y_max and y >= y_min => {a.move((x, 
                                                                                              y));
                                                                                      this.agents.add(a);
                                                                                      embed void { break; } end}
           ((x, y), 
            (x_max, y_max), 
            (x_min, 
             y_min)) when x > x_max and y < y_min or y > y_max or x < x_min and y < y_min or y > y_max => {print("this should never happen, agent way off");
                                                                                                           1 / 0;
                                                                                                           ()}
           ((x, y), 
            (x_max, y_max), 
            (x_min, 
             y_min)) when x > x_max => {nejbor = this.right.external_move(a.copy(), 
                                                                          (x, y));
                                        ()}
           ((x, y), 
            (x_max, y_max), 
            (x_min, 
             y_min)) when x < x_min => {nejbor = this.left.external_move(a.copy(), 
                                                                         (x, y));
                                        ()}
           ((x, y), 
            (x_max, y_max), 
            (x_min, 
             y_min)) when y > y_max => {nejbor = this.up.external_move(a.copy(), 
                                                                       (x, y));
                                        ()}
           ((x, y), 
            (x_max, y_max), 
            (x_min, 
             y_min)) when y < y_min => {nejbor = this.down.external_move(a.copy(), 
                                                                         (x, y));
                                        ()}
         ;
         await nejbor;
         if get nejbor then
           embed void { break; } end
         else
           {this.agents.add([a]);
            i = i + 1}}
In expression: 
  let iterator = new HashMapIterator<Agent>(this.agents.get_data())
In expression: 
  let iterator = new HashMapIterator<Agent>(this.agents.get_data())
In expression: 
  {let iterator = new HashMapIterator<Agent>(this.agents.get_data());
   while iterator.has_next()
     let a = match iterator.next() with
               Just entry => entry.value
             
         desired = a.next()
         i = 0
         nejbor = null : Fut bool
     in
       while i < |desired|
         {match (desired[i], this.max, this.min) with
            _ when this.agents.isin(desired[i]) => {i = i + 1;
                                                    embed void { continue; } end;
                                                    ()}
            ((x, y), 
             (x_max, y_max), 
             (x_min, 
              y_min)) when x <= x_max and x >= x_min and y <= y_max and y >= y_min => {a.move((x, 
                                                                                               y));
                                                                                       this.agents.add(a);
                                                                                       embed void { break; } end}
            ((x, y), 
             (x_max, y_max), 
             (x_min, 
              y_min)) when x > x_max and y < y_min or y > y_max or x < x_min and y < y_min or y > y_max => {print("this should never happen, agent way off");
                                                                                                            1 / 0;
                                                                                                            ()}
            ((x, y), 
             (x_max, y_max), 
             (x_min, 
              y_min)) when x > x_max => {nejbor = this.right.external_move(a.copy(), 
                                                                           (x, y));
                                         ()}
            ((x, y), 
             (x_max, y_max), 
             (x_min, 
              y_min)) when x < x_min => {nejbor = this.left.external_move(a.copy(), 
                                                                          (x, y));
                                         ()}
            ((x, y), 
             (x_max, y_max), 
             (x_min, 
              y_min)) when y > y_max => {nejbor = this.up.external_move(a.copy(), 
                                                                        (x, y));
                                         ()}
            ((x, y), 
             (x_max, y_max), 
             (x_min, 
              y_min)) when y < y_min => {nejbor = this.down.external_move(a.copy(), 
                                                                          (x, y));
                                         ()}
          ;
          await nejbor;
          if get nejbor then
            embed void { break; } end
          else
            {this.agents.add([a]);
             i = i + 1}};
   true}
In expression: 
  if this.agents.size() == 0 then
    false
  else
    {let iterator = new HashMapIterator<Agent>(this.agents.get_data());
     while iterator.has_next()
       let a = match iterator.next() with
                 Just entry => entry.value
               
           desired = a.next()
           i = 0
           nejbor = null : Fut bool
       in
         while i < |desired|
           {match (desired[i], this.max, this.min) with
              _ when this.agents.isin(desired[i]) => {i = i + 1;
                                                      embed void { continue; } end;
                                                      ()}
              ((x, y), 
               (x_max, y_max), 
               (x_min, 
                y_min)) when x <= x_max and x >= x_min and y <= y_max and y >= y_min => {a.move((x, 
                                                                                                 y));
                                                                                         this.agents.add(a);
                                                                                         embed void { break; } end}
              ((x, y), 
               (x_max, y_max), 
               (x_min, 
                y_min)) when x > x_max and y < y_min or y > y_max or x < x_min and y < y_min or y > y_max => {print("this should never happen, agent way off");
                                                                                                              1 / 0;
                                                                                                              ()}
              ((x, y), 
               (x_max, y_max), 
               (x_min, 
                y_min)) when x > x_max => {nejbor = this.right.external_move(a.copy(), 
                                                                             (x, y));
                                           ()}
              ((x, y), 
               (x_max, y_max), 
               (x_min, 
                y_min)) when x < x_min => {nejbor = this.left.external_move(a.copy(), 
                                                                            (x, y));
                                           ()}
              ((x, y), 
               (x_max, y_max), 
               (x_min, 
                y_min)) when y > y_max => {nejbor = this.up.external_move(a.copy(), 
                                                                          (x, y));
                                           ()}
              ((x, y), 
               (x_max, y_max), 
               (x_min, 
                y_min)) when y < y_min => {nejbor = this.down.external_move(a.copy(), 
                                                                            (x, y));
                                           ()}
            ;
            await nejbor;
            if get nejbor then
              embed void { break; } end
            else
              {this.agents.add([a]);
               i = i + 1}};
     true}
In expression: 
  if this.agents.size() == 0 then
    false
  else
    {let iterator = new HashMapIterator<Agent>(this.agents.get_data());
     while iterator.has_next()
       let a = match iterator.next() with
                 Just entry => entry.value
               
           desired = a.next()
           i = 0
           nejbor = null : Fut bool
       in
         while i < |desired|
           {match (desired[i], this.max, this.min) with
              _ when this.agents.isin(desired[i]) => {i = i + 1;
                                                      embed void { continue; } end;
                                                      ()}
              ((x, y), 
               (x_max, y_max), 
               (x_min, 
                y_min)) when x <= x_max and x >= x_min and y <= y_max and y >= y_min => {a.move((x, 
                                                                                                 y));
                                                                                         this.agents.add(a);
                                                                                         embed void { break; } end}
              ((x, y), 
               (x_max, y_max), 
               (x_min, 
                y_min)) when x > x_max and y < y_min or y > y_max or x < x_min and y < y_min or y > y_max => {print("this should never happen, agent way off");
                                                                                                              1 / 0;
                                                                                                              ()}
              ((x, y), 
               (x_max, y_max), 
               (x_min, 
                y_min)) when x > x_max => {nejbor = this.right.external_move(a.copy(), 
                                                                             (x, y));
                                           ()}
              ((x, y), 
               (x_max, y_max), 
               (x_min, 
                y_min)) when x < x_min => {nejbor = this.left.external_move(a.copy(), 
                                                                            (x, y));
                                           ()}
              ((x, y), 
               (x_max, y_max), 
               (x_min, 
                y_min)) when y > y_max => {nejbor = this.up.external_move(a.copy(), 
                                                                          (x, y));
                                           ()}
              ((x, y), 
               (x_max, y_max), 
               (x_min, 
                y_min)) when y < y_min => {nejbor = this.down.external_move(a.copy(), 
                                                                            (x, y));
                                           ()}
            ;
            await nejbor;
            if get nejbor then
              embed void { break; } end
            else
              {this.agents.add([a]);
               i = i + 1}};
     true}
In method 'move' of type 'bool'
In class 'Box'

