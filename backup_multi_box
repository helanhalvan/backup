class Multi_Box {
    --max x and y cords
    max : (int,int)
    --min x and y cords
    min : (int,int)
    subarray : [Box]
    def init(in_max:(int,int), in_min:(int,int),currentlevel:Box,leveldata:int ) : void {
            match (in_max,in_min) with
                ((xmax,ymax),(xmin,ymin)) => {
          this.max=(xmax,ymax);
          this.min=(xmin,ymin);
        let
          dx=xmax-xmin
          dy=ymax-ymin
        in {
          dx=dx/2;
          dy=dy/2;
          this.subarray = new [Box](4);
          this.subarray[0]=new Box(this.max,(xmax-dx+1,ymax-dy+1 ), Just currentlevel,leveldata );
          this.subarray[1]=new Box( (xmax-dx,ymax-dy),this.min,     Just currentlevel,leveldata );
          this.subarray[2]=new Box( (xmax-dx,ymax),(xmin,ymax-dy+1),Just currentlevel,leveldata );
          this.subarray[3]=new Box( (xmax,ymax-dy),(xmax-dx+1,ymin),Just currentlevel,leveldata );
    }}}
    def add(a:Agent) : void {
        if(  ((this.subarray)[0]).add(a)) then { () }
        else if( ((this.subarray)[1]).add(a)) then { () }
        else if( ((this.subarray)[2]).add(a)) then { () }
        else if( ((this.subarray)[3]).add(a)) then { () }
        else { print("{} didn't get in \n", a.pos);}
    }
    def agents() : [(int,int)] {
        flatten([
        get(((this.subarray)[0]).agents()),
        get(((this.subarray)[1]).agents()),
        get(((this.subarray)[2]).agents()),
        get(((this.subarray)[3]).agents())
        ])
    }
    def external_move(ag:Agent, pos:(int,int)) : bool {
        let
            --external_move now have a horrible type,
         a = ((this.subarray)[0]).external_move(ag,pos)
         b = ((this.subarray)[1]).external_move(ag,pos)
         c = ((this.subarray)[2]).external_move(ag,pos)
         d = ((this.subarray)[3]).external_move(ag,pos)
        in {
            --allowed to short circut
            (get(a)) or (get(b)) or (get(c)) or (get(d))
        }
    }
    def link(box:Box) : void {
            for a in this.subarray
                a.link(box)
        }
    def move() : bool {
            let
            a = ((this.subarray)[0]).move()
            b = ((this.subarray)[1]).move()
            c = ((this.subarray)[2]).move()
            d = ((this.subarray)[3]).move()
            in {
            --not allowed to short CIRCUT
            print("{}:{}:{}:{} \n", get(a),get(b),get(c),get(d));
            get(a);
            get(b);
            get(c);
            get(d);
            (get(a)) or (get(b)) or (get(c)) or (get(d))
            }
        }
}
