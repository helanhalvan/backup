import Ped_util.Agent_passive
import Ped_util.Global_funs
class Main {
   def main(args: [String]) : void {
       let
            agents=parse_file("scenario.xml")
            ui =false
       in {
        this!baseline(agents,ui);
       }
   }
def baseline(agents: [Agent], ui:bool) : void {
     let
         i = 0
         drivers= new [Agent_driver]( |agents| )
         futures= new [Fut void](|agents|)
         j = 0
     in
     {
         for a in agents {
             drivers[i]=new Agent_driver(a,|agents|);
             i=i+1;
         };
         i=0;
         for a in drivers{
             for b in drivers {
                 unless (a==b) then {
                 a!link(b);
                 }
             }
         };
         --print("baseline setup done {} ui=={}\n",|drivers|, ui);
         this!baseline_loop(40000,drivers,futures,ui);
     }
 }
def baseline_loop(i:int,drivers:[Agent_driver],futures:[Fut void],ui:bool) : void {
             let j = 0;
             let last_time=clock();
             for a in drivers {
                 futures[j]=a.move();
                 j=j+1;
             };
             for a in futures {
                 get(a);
             };
             if(i % 1000==0) then {
                 print("{} {}\n",i, clock()-last_time);
             };
         if i>0 then this!baseline_loop(i-1, drivers,futures,ui);
 }
}
class Agent_driver {
    agent : Agent
    links : [Agent_driver]
    index : int
    def get_pos() : (int,int) {
        this.agent.pos;
    }
    def init(a:Agent,size:int) : void {
        this.agent=a;
        this.links=new [Agent_driver](size-1);
        this.index=0;
    }
    def link(a:Agent_driver) : void {
        this.links[this.index]=a;
        this.index=this.index+1;
    }
    def move() : void {
        for desired in this.agent.next() {
            let
                futures = new [Fut bool](|this.links|)
                i = 0
                full = false
            in {
            for a in this.links {
                --print("{},{},{}\n",i,futures[i],a);
                futures[i]=a.there(desired);
                i=i+1;
            };
            i=0;
            while (i < |futures| ) {
                await(futures[i]);
                full = full or get(futures[i]);
                i=i+1;
            };
            if full==false then {
                this.agent.move(desired);
                embed void { break; } end;
            }
        }};
        ()
    }
    def there(pos:(int,int)) : bool {
        if (equal(this.agent.pos(),pos)) then true
        else false
    }
}
