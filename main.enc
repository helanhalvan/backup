import SDL.SDL_Main
import SDL.SDL_Types
import SDL.SDL_Primitives
import Ped_util.Agent_passive
import Ped_util.Agent_active
import Ped_util.UI
import Ped_util.Global_funs
import Ped_util.List_driver
--import Ped_util.Bucket_driver
import Ped_util.Matrix_driver
import Ped_util.Regions
--import Data.Either
class Main {
--TODO
--REPLACE/INVESTIGATE HASHMAP IN BOX
   def main(args: [String]) : void {
       let
            version={     match (args[1]).to_int() with
                            Just result => result
                            Nothing     => { 0 };}
            agents=parse_file(args[2])
            ui ={ match (args[3]).to_int() with
                            Just 1 => true
                            _ => false}
       in {
        ();
         --print(args[2]);

        if version==1 then this!baseline(agents,ui);
        --if version==2 then bucket(agents,ui);
        if version==3 then regions(agents,ui);
        if version==4 then list(agents,ui);
        if version==5 then matrix(agents,ui); --}
       }
   }

def baseline(agents: [Agent], ui:bool) : void {
     var
         i = 0;
        var  drivers= new [Agent_driver]( |agents| );
        var  futures= new [Fut void](|agents|);
         var j = 0;
         var sdl_main = if ui then make_UI() else null : SDL_Main;

     {
         for a in agents {
             drivers[i]=new Agent_driver(a,|agents|);
             i=i+1;
         };
         i=0;
         for a in drivers{
             for b in drivers {
                 unless (a==b) then {
                 a!link(b);
                 }
             }
         };
         --print("baseline setup done {} ui=={}\n",|drivers|, ui);
         this!baseline_loop(40000,drivers,futures,ui,sdl_main,clock());
     }
 }
def baseline_loop(i:int,drivers:[Agent_driver],futures:[Fut void],ui:bool,sdl_main:SDL_Main,last_time:int) : void {
             var j = 0;
             --let new_time = clock()-last_time;
             for a in drivers {
                 futures[j]=a.move();
                 j=j+1;
             };
             for a in futures {
                 get(a);
             };
            if(ui) then {
            var positions = new [(int,int)](|drivers|);
                for w in [0..(|drivers|-1)] {
                    positions[w]=get((drivers[w]).get_pos());
                };
                show(positions,sdl_main)
            };
             --if(i % 1000==0) then {print("{} {}\n",i,new_time);};
         if i>0 then this!baseline_loop(i-1, drivers,futures,ui,sdl_main,last_time);
 }
}
