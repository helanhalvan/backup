import SDL.SDL_Main
import SDL.SDL_Types
import SDL.SDL_Primitives
import Ped_util.Box
import Ped_util.Agent_passive
import Ped_util.Agent_active
import Ped_util.UI
import Ped_util.Global_funs
import Ped_util.List_driver
import Ped_util.Bucket_driver
import Data.Either
class Main {
--TODO
--REPLACE/INVESTIGATE HASHMAP IN BOX
--Integrate with encore-case-studies-master/benchmarks
   def main(args: [String]) : void {
       let
            version={     match (args[1]).to_int() with
                            Just result => result
                            Nothing     => { 0 };}
            agents=parse_file(args[2])
            ui ={ match (args[3]).to_int() with
                            Just 1 => true
                            _ => false}
       in {
         --print(args[2]);
        if version==1 then this!baseline(agents,ui);
        if version==2 then bucket(agents,ui);
        --if version==3 then this!box(agents,ui);
        if version==4 then list(agents,ui);
       }
   }
def box(agents: [Agent], ui:bool) : void {
     let
        sdl_main = if ui then make_UI() else null : SDL_Main
        superbox = new_Box(agents)
     in
    this!box_loop(40000, superbox, ui,sdl_main)
}
def box_loop(i:int, superbox:Box, ui:bool,sdl_main:SDL_Main) : void {
    get(superbox.move());
    --print(i);
    if ui then {
        show(get(superbox.agents()),sdl_main);
    };
    if i>0 then this!box_loop(i-1,superbox,ui,sdl_main) else {
        superbox.destroy() -- TODO implement
    };
}
def baseline(agents: [Agent], ui:bool) : void {
     let
         i = 0
         drivers= new [Agent_driver]( |agents| )
         futures= new [Fut void](|agents|)
         j = 0
         sdl_main = if ui then make_UI() else null : SDL_Main
     in
     {
         for a in agents {
             drivers[i]=new Agent_driver(a,|agents|);
             i=i+1;
         };
         i=0;
         for a in drivers{
             for b in drivers {
                 unless (a==b) then {
                 a!link(b);
                 }
             }
         };
         --print("baseline setup done {} ui=={}\n",|drivers|, ui);
         this!baseline_loop(40000,drivers,futures,ui,sdl_main,clock());
     }
 }
def baseline_loop(i:int,drivers:[Agent_driver],futures:[Fut void],ui:bool,sdl_main:SDL_Main,last_time:int) : void {
             let j = 0;
             --let new_time = clock()-last_time;
             for a in drivers {
                 futures[j]=a.move();
                 j=j+1;
             };
             for a in futures {
                 get(a);
             };
            if(ui) then {
            let positions = new [(int,int)](|drivers|);
                for w in [0..(|drivers|-1)] {
                    positions[w]=get((drivers[w]).get_pos());
                };
                show(positions,sdl_main)
            };
         if i>0 then this!baseline_loop(i-1, drivers,futures,ui,sdl_main,last_time);
 }
}
