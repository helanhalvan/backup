import FileIO.IO
import XML.xml
import Ped_util.agent_passive
import SDL.SDL_Main

class Main {
--TODO
--Add comments to explain what's going on

-- compile script
--  -d for starting right into gdb
--  -r for compile and run
   def main() : void {
    -- {--
       let
       superbox = new Multi_box(this.parse_file("scenario.xml"))
        x_size=0
        y_size=0

       in {
       match (get(superbox.max()),get(superbox.min())) with
                ((xmax,ymax),(xmin,ymin)) => {x_size=(xmax-xmin); y_size=(ymax-ymin);};
       let sdl_main = new SDL_Main(1000,1000);
       get sdl_main.clearAll();
       --get sdl_main.setRenderColor(new ColorRGBA(1,1,1,0));
       --get sdl_main.fillRectangle(new Rectangle(0,0,500,500));
       --get sdl_main.setRenderColor(new ColorRGBA(240,220,240,0));
       get sdl_main.refresh();
       this!loop(superbox,40000,sdl_main);
       } --}
   }
   def loop(superbox:Multi_box, tick:int,sdl_main:SDL_Main) : void { -- ,sdl_main:SDL_Main) : void {
       print("tick {}\n",tick);
       get(sdl_main.clearAll());
       get sdl_main.setRenderColor(new ColorRGBA(240,240,240,0));
        -- {--
       for a in get(superbox.agents())
       {
            match a.pos with
                (x,y) => { --print("{} {} \n",x,y);
                            get sdl_main.fillRectangle( new Rectangle(x*4,y*4,1,1) )}
                  _ => print("AGENT GOT NO POS!?\n")
       }; --}
       get sdl_main.setRenderColor(new ColorRGBA(0,240,0,0));
       get sdl_main.fillRectangle( new Rectangle(160*4,60*4,3,3) );
       get sdl_main.fillRectangle( new Rectangle(0*4,60*4,3,3) );
       get(sdl_main.refresh());
        --while (true) { () };
       if tick>0 and get(superbox.move()) then this!loop(superbox,tick-1,sdl_main)
       }

    def parse_file(fname:String) : [Agent] {
           let
               sen = new XML_lib()
               file= new XML_node()
            in {
               match sen.file_to_xml("scenario.xml") with
               Just xml => {file=xml; print("\n\nWORKED!\n")}
               Nothing => print("\n\nBADXML!\n");
            let
                xml_way = file.children_named("waypoint")
                waypoints=new [(int,int)] ( |xml_way| )
                waypoints_distance=new [int] ( |xml_way| )
                i=0
            in {
                --print(|xml_way|);
                for a in xml_way {
                    waypoints[i]={
                    match (a.attribute_value("x").to_int(),a.attribute_value("y").to_int()) with
                        (Just x,Just y) => (x,y)
                        _ => { print("BADINT!\n"); (0,0)}};
                    waypoints_distance[i]= int_or_0(a.attribute_value("r").to_int());
                    --print("derp {}\n",waypoints_distance[i]);
                    --print("derp {}\n", copy_ar(waypoints_distance)[i]);
                    i=i+1
                };
                                   --print("SO MANY WAYPOINTS {}\n",|waypoints|);
               let nr_agents=0;
               for a in file.children_named("agent") {
                       nr_agents=nr_agents+{
                           match a.attribute_value("n").to_int() with
                           Just nr => nr
                           _ => {print("BADINT2!\n"); 0}
                       }
                   };
                   let agents= new [Agent](nr_agents)
                       i=0
                    in {
                           for a in file.children_named("agent") {
                               let
                                   max = int_or_0(a.attribute_value("n").to_int())
                                   x = int_or_0(a.attribute_value("xs").to_int())
                                   y = int_or_0(a.attribute_value("ys").to_int())
                                   dx_max = int_or_0(a.attribute_value("dx").to_int())
                                   dy_max = int_or_0(a.attribute_value("dy").to_int())
                                   agent_waypoints=new [(int,int)](|a.children_named("addway")|)
                                   dx=x
                                   dy=y
                                   j=0
                                   in {
                                       for b in a.children_named("addway") {
                                           agent_waypoints[j]=waypoints[int_or_0(string_or_empty(b.attribute_value("id").substring(1,2)).to_int())-1];
                                           --print(agent_waypoints[i]);
                                           unless |agent_waypoints|>1 then {
                                               print("THIS SHOULD NEVER HAPPEN |new_agent.waypoint|={}\n", |agent_waypoints|);
                                               max = 1/0
                                           };
                                           j=j+1;
                                       };
                                        print((x,y,dx_max,dy_max,dx,dy,max));
                                       --for each agent
                                       for unused in [0..max] {
                                           --for this to be safe, agent_waypoints need to be copied for every agent
                                           --in the future, I can make it immutable instead
                                           --also distributes agents in a packed ball around (x,y) with some collisions
                                           --this should to be fixed in the future
                                            if(dx>x+dx_max) then {
                                                dx=x-dx_max
                                            }
                                            else if(dy>y+dy_max) then {
                                                dy=y-dy_max;
                                                dx=dx+rand()%4
                                            }
                                            else {
                                                dy=dy+rand()%4
                                            };
                                                --print((i,dx,dy));
                                                agents[i]=new Agent((dx,dy),copy_tr(agent_waypoints),copy_ar(waypoints_distance),i);
                                                i=i+1
                                       }
                                   }};
                                   --this print checks if waypoints are added correctly
                                    print("checking\n");
                                   for a in agents {
                                       if (a!=null and |a.targets|==2 and |a.targets_size|==2) then
                                           print(".")
                                           else
                                               print("AGENT HAVE {} WAYPOINTS\n",|a.targets|)
                                           };
                                           agents
                                       }}}}
}
def flatten(listlist:[[Agent]]) : [Agent] {
        let len=0;
        for a in listlist {
            len=len+ |a| ;
        };
        let list=new[Agent](len);
        let i=0;
        for a in listlist {
            for b in a {
                list[i]=b;
                i=i+1;
            }
        };
        list
    }
def max(a:int,b:int) : int {
    if(a>b) then a
    else b
    }
def min(a:int,b:int) : int {
    if(a<b) then a
    else b
    }
def int_or_0 (i:Maybe int ) : int {
        match i with
            Just nr => nr
            _ => {print("or0\n"); 0}
   }
def string_or_empty( i: Maybe String ) : String {
        match i with
            Just nr => {nr}
            _ => {print("orEmpty\n");""}
    }
{--
trait Box {
    require min() : Fut (int,int)
    require max() : Fut (int,int)
    require add(a:Agent) : Fut bool
    require link(a:Box) : Fut bool
    require external_move(b:Agent,a:(int,int)) : Fut bool
}
--}

--multi threaded 2D space container
class Multi_box {
    --max x and y cords
    max : (int,int)
    --min x and y cords
    min : (int,int)

    --4 sub-boxes, together covering all the space in Multi_box
    {--
    -----------------
    |toplevel       |
    |    |tl|tr|    |
    |    -------    |
    |    |bl|br|    |
    |               |
    -----------------
    --}
    top_right : Box
    bottom_right : Box
    top_left : Box
    bottom_left : Box

    --TODO, adding a toplevel field where I can send agents that go out of bounds
    --currently I just create a massive box, and have agents in it neve move
    toplevel : Box

    def init(agents:[Agent]) : void {
        let
            dx=0
            dy=0
        in {
        --find global xmax, xmin, and ymin, use to create boundries for the 2D space.
        --looks at both starting positions and waypoints
        match this.find_extreme(agents) with
            (xmax,ymax,xmin,ymin) => {this.max=(xmax,ymax);
                                      this.min=(xmin,ymin);
                                      dx=xmax-xmin;
                                      dy=ymax-ymin;
                                      --if(dx%2==0) then
                                        dx=dx/2;
                                      --else
                                        dy=dy/2;
                                      print("{} {} {}\n",this.max,this.min,(xmax-dx,ymax-dy));
                                      this.top_right=new Box(this.max,(xmax-dx+1,ymax-dy+1 ) );
                                      this.bottom_left=new Box( (xmax-dx,ymax-dy),this.min);
                                      this.top_left= new Box( (xmax-dx,ymax),(xmin,ymax-dy+1) );
                                      this.bottom_right=new Box( (xmax,ymax-dy),(xmax-dx+1,ymin) );
                                      this.toplevel=new Box( (100000,100000), (-100000,-100000) );
                                      print("tr {} {}\n",get(this.top_right.max()),get(this.top_right.min()) );
                                      print("bl {} {}\n",get(this.bottom_left.max()),get(this.bottom_left.min()) );
                                      print("tl {} {}\n",get(this.top_left.max()),get(this.top_left.min()) );
                                      print("br {} {}\n",get(this.bottom_right.max()),get(this.bottom_right.min()) );
                                      };
        --put each agent into exactly one box

        for a in agents {
            -- adding agents into boxes
            if( get(this.top_right.add(a))) then { () }
            else if( get(this.top_left.add(a))) then { () }
            else if( get(this.bottom_right.add(a))) then { () }
            else if( get(this.bottom_left.add(a))) then { () }
            else { print("{} didn't get in \n", a.pos);}
        };
        --LINK to toplevel
        this.top_right.default_link(this.toplevel);
        this.top_left.default_link(this.toplevel);
        this.bottom_right.default_link(this.toplevel);
        this.bottom_left.default_link(this.toplevel);

        let win=true;
        --LINKING BOXES, to allow them to pass agents between eachother
        win=win and get (this.top_right.link(this.top_left));
        win=win and get (this.top_right.link(this.bottom_right));
        win=win and get (this.top_left.link(this.top_right));
        win=win and get (this.top_left.link(this.bottom_left));
        win=win and get (this.bottom_left.link(this.bottom_right));
        win=win and get (this.bottom_left.link(this.top_left));
        win=win and get (this.bottom_right.link(this.top_right));
        win=win and get (this.bottom_right.link(this.bottom_left));

        print("WIN={}\n",win);
        }
    }
    --get corners of box
    def max() : (int,int) {this.max}
    def min() : (int,int) {this.min}

    --moves all internal agents on step, returns true if any agents tried to move
    def move () : bool {
        --debug check
        let
        a = this.top_right.alive()
        b = this.top_left.alive()
        c = this.bottom_right.alive()
        d = this.bottom_left.alive()
        in {
        unless ( (get(a)) or (get(b)) or (get(c)) or (get(d)) ) then print("SOMEONE IS DEAD!\n");

        --Moves all the boxes in parrallel, then awaits them being done moving
        a = this.top_right.move();
        b = this.top_left.move();
        c = this.bottom_right.move();
        d = this.bottom_left.move();
        (get(a)) or (get(b)) or (get(c)) or (get(d))
        }
    }
    def agents() : [Agent] { flatten([get(this.top_right.agents()),
                             get(this.top_left.agents()),
                             get(this.bottom_right.agents()),
                             get(this.bottom_left.agents())]) }
    def find_extreme(agents:[Agent]) : (int,int,int,int) {
        let extreme=(-10000,-10000,10000,10000);
        let i=0;
        for a in agents {
            --print("{}\n",i);
            i=i+1;
            extreme=this.extreme_check(a.pos(),extreme);
            for b in a.targets {
                extreme=this.extreme_check(b,extreme);
            }
        };
        extreme
    }
    def extreme_check(a:(int,int),b:(int,int,int,int) ) : (int,int,int,int) {
        match (a,b) with
            ((x,y),(xmax,ymax,xmin,ymin)) => (max(x,xmax),max(y,ymax),min(x,xmin),min(y,ymin))
    }
}
--single threaded 2D space container
--contains all Agents in a given 2D region of space
--assumess cordnate system where Y is height and X is with, so increasing X means further to the right
class Box {
-- min and max are inclusive
-- max is the greatest X value and the greatest Y value box contains
-- min is the smalles X and Y values
 max : (int,int)
 min : (int,int)
 up : Box
 down : Box
 left : Box
 right : Box
 agents : Agent_struct

def init(in_max:(int,int), in_min:(int,int) ) : void {
    this.agents=new Agent_struct(new [Agent](0));
    this.max=in_max;
    this.min=in_min;
    }
--getters for borders
def min() : (int,int) {this.min}
def max() : (int,int) {this.max}
def agents() : [Agent] {
    let
     a=this.agents.get_data()
     b = new [Agent](|a|)
     i=0
    in {
    for c in a {
        b[i]=c.copy();
        i=i+1
    };
    this.agents.add(b);
    a
    }}

--returns true if a is inside the box, and stores it. Otherwise returns false
--TODO, check if legal, not needed currently
def add(a:Agent) : bool {
    match (a.pos(),this.max,this.min) with
        ((x,y),(xmax,ymax),(xmin,ymin)) when x>xmax or x<xmin or y>ymax or y<ymin => false
        _ => {this.agents.add([a]); true}
}
--if the arguements shares a border with this box, it's added to the apropriate edge and returns true
--otherwise returns false
def link(a:Box) : bool {
    let c=a.max();
    let d=a.min();
    await(c);
    await(d);
    match (this.max,this.min,get(c),get(d) ) with
        ( (x_max_1,y_max_1),(x_min_1,y_min_1),(x_max_2,y_max_2),(x_min_2,y_min_2) ) when ((x_max_1+1) == x_min_2) => {this.right=a;print("right\n");true }
        ( (x_max_1,y_max_1),(x_min_1,y_min_1),(x_max_2,y_max_2),(x_min_2,y_min_2) ) when ((y_max_1+1) == y_min_2) => {this.up=a;   print("up\n"); true }
        ( (x_max_1,y_max_1),(x_min_1,y_min_1),(x_max_2,y_max_2),(x_min_2,y_min_2) ) when ((x_max_2+1) == x_min_1) => {this.left=a; print("left\n");true }
        ( (x_max_1,y_max_1),(x_min_1,y_min_1),(x_max_2,y_max_2),(x_min_2,y_min_2) ) when ((y_max_2+1) == y_min_1) => {this.down=a; print("down\n");true }
        _ => { false }
    }
def default_link(a:Box) : void {
        this.up=a;
        this.down=a;
        this.left=a;
        this.right=a;
    }
def alive(): bool { true }

 --moves all agents in the box once
 --returns true if there are some agents to move
 --otherwise false
def move(): bool {
   if (this.agents.size() == 0) then { false } else {
       for a in this.agents.get_data() {
            let
                desired = a.next()
                i = 0
                nejbor = null:Fut bool
            in {
            while( i < |desired| ) {
                match (desired[i],this.max,this.min) with
                    --local collision
                    _ when this.agents.isin(desired[i])  => {i=i+1; embed void { continue; } end; ()}
                    --local move
                    ((x,y),(x_max,y_max),(x_min,y_min)) when (x<=x_max and x>=x_min and y<=y_max and y>=y_min) => { a.move((x,y));
                                                                                                                    this.agents.add([a]);
                                                                                                                    --print("internal move {} {}\n",x,y);
                                                                                                                    embed void { break; } end
                                                                                                                  }
                    ((x,y),(x_max,y_max),(x_min,y_min)) when (x>x_max and (y<y_min or y>y_max) ) or (x<x_min and (y<y_min or y>y_max) ) => { print("this should never happen, agent way off"); 1/0; () }
                    --external move
                    ((x,y),(x_max,y_max),(x_min,y_min)) when (x>x_max) => { nejbor=this.right.external_move(a.copy(),(x,y) ); () }
                    ((x,y),(x_max,y_max),(x_min,y_min)) when (x<x_min) => { nejbor=this.left.external_move(a.copy(),(x,y) ); () }
                    ((x,y),(x_max,y_max),(x_min,y_min)) when (y>y_max) => { nejbor=this.up.external_move(a.copy(),(x,y) ); ()  }
                    ((x,y),(x_max,y_max),(x_min,y_min)) when (y<y_min) => { nejbor=this.down.external_move(a.copy(),(x,y) ); () };
                --print("external move {} {}\n", a.id, a.pos());
                await(nejbor);
                if get(nejbor) then
                    {
                        embed void { break; } end}
                else
                    {this.agents.add([a]);i=i+1};
                };
            }};
          true
         }
      }

    --recives a Agent from another box
def external_move(a:Agent, pos:(int,int) ) : bool {
    if(this.agents.isin(pos)) then { false } else {
        a.move(pos);
        this.agents.add([a]);
        true
    }
    }
}
